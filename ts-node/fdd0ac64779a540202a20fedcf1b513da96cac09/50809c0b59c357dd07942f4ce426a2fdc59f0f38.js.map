{"version":3,"file":"/home/pioneer/work/jason/actodo_api/src/routes/GroupRouter.ts","sources":["/home/pioneer/work/jason/actodo_api/src/routes/GroupRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Router, Request, Response, NextFunction} from 'express';\n\nlet tokenHelper = require('../tools/tokens');\nlet toolHelpers = require('../tools/_helpers');\nconst groupHelper = require('../tools/group_helpers');\nimport {IRequest} from '../classes/IRequest';\nconst validate = require('../classes/ParamValidator');\nimport GroupValidation from '../validations/GroupValidation';\nimport Action from '../db/models/action';\n\nvar moment = require('moment');\n\nvar path = require('path'),\n    fs = require('fs');\n\nimport Group from '../db/models/group';\nvar util = require('util');\n\nexport class GroupRouter {\n  router: Router\n\n  /**\n   * Initialize the GroupRouter\n   */\n  constructor() {\n    this.router = Router();\n    this.init();\n  }\n\n  /**\n   * @description GET all public and non-deleted groups.\n   * @param Request\n   * @param Response\n   * @param Callback (NextFunction)\n   */\n  public getPublicGroups(req: Request, res: Response, next: NextFunction) {\n\n    Group.where({'private':0, 'deleted_at':null}).fetch({\n      withRelated: [ \n        // {'settings':function(qb) {\n        //   qb.select('allow_member_action','member_action_level', 'group_setting_id');\n        // }}, \n        // {'tags':function(qb) {\n        //   qb.select('group_tag_id', 'tag' );\n        // }}, \n        'settings', 'tags',\n        {'creator':function(qb) {\n          qb.column('user_id', 'first_name', 'last_name', 'avatar_file');\n        }}]\n    })\n    .asCallback((err, groups) => {\n      if(err) {\n          res.status(400).json({\n          success: 0,\n          message: err.message\n        });\n      } else {\n        var tags = groups.related('tags').map(function(a) {\n          return a.get('tag');\n        });\n        res.status(200).json({\n          success: 1,\n          groups: groups\n        });\n      }\n    });\n  }\n\n  /**\n   * @description GET group by id in request object\n   * @param Request\n   * @param Response\n   * @param Callback function (NextFunction)\n   * TODO: Need to make sure user is member of group, or group is public\n   */\n  //////////****getGroup will no longer need because the GET user/1/groups returns them */\n  // public getGroup(req: Request, res: Response, next: NextFunction) {\n  //   let groupId = parseInt(req.params.id);\n  //   return toolHelpers.getGroupById(groupId)\n  //   .asCallback((err, values) => {\n  //     if(err) {\n  //       res.status(404)\n  //         .send({\n  //           message: 'No group found with the given id.',\n  //           status: res.status\n  //         });\n  //     } else {\n  //       res.status(200)\n  //         .send({\n  //           message: 'Success',\n  //           status: res.status,\n  //           group: values\n  //         });\n  //     }\n  //   });\n  // }\n\n    /**\n    * @description Creates a new group\n    * @param Request\n    * @param Response\n    * @param Callback Function\n    */\n  public createGroup(req: IRequest, res: Response, next: NextFunction) {\n    return new Group(req.body).save()\n      .then((group) => {\n        if(req.files){\n          try{\n            let file = req.files.banner_image_file;\n            let relativepath = './public/uploads/groups/banners/'+group.get('group_id')+path.extname(file.name).toLowerCase();\n            var targetPath = path.resolve(relativepath);\n            if ((path.extname(file.name).toLowerCase() === '.jpg')||\n                (path.extname(file.name).toLowerCase() === '.png')) { \n\n              file.mv(targetPath, function(err) {\n                if (err) {\n                  err.message = \"Upload failed\";\n                  throw err;\n                }\n                else {\n                  return true;\n                }\n              });\n              let image_url = toolHelpers.getBaseUrl(req) + 'uploads/groups/banners/'+group.get('group_id')+path.extname(file.name).toLowerCase();\n              return group.save({banner_image_file:image_url });\n\n            } else {\n              let err = new Error();\n              err.message = \"Only jpg/png are acceptable\";\n              throw err;\n            }\n          }catch(err){\n            if(!err.message) err.message = \"Unknown error prevented from uploading\";\n            throw err;\n          }\n        }\n        else{\n          return group;\n          \n        }\n      })\n      .then((group) => {\n        res.status(200).json({\n            success: 1,\n            token: tokenHelper.encodeToken(req.user.get('user_id')),\n            user: req.user,\n            group: group,\n            message:\"Success\"\n          });\n      })\n      .catch((err) => {\n        return res.status(500).json({\n          success: 0,\n          message:err.message,\n          data:err.data,  \n        });\n      });\n  }\n\n\n  /**\n  * @description Create GET /groups/:group_id/actions API Call\n                  Returns array of all non-deleted actions for the specified group\n                  Only return all open actions, and any actions that ended in the last 2 months\n                  Exclude any deleted actions (where action.deleted_at is not null)\n                  \n                  If group is private, only return actions if calling user is a member of the group\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: Need to ensure user is member of group, or group is public\n  */\n  public getGroupActions(req: IRequest, res: Response, next: NextFunction) {\n    res.status(200).json({\n      success: 1,\n      actions: req.current_group.related('open_actions')\n    });\n  }\n\n  /**\n  * @description  createGroupAction\n          Create POST /groups/:group_id/actions API Call\n              Creates a new action for the specified group\n                  -Ensure required fields are sent: title, subtitle, description, thanks_msg, action_type_id\n                  -Ensure submitter is a member of the group (group_user record) and:\n                    ;Has group_user.submit_action = true\n                    ;OR, group_setting.allow_member_action = true \n                       and user has earned points on group actions equal to \n                       or greater than group_setting.member_action_level\n          Returns the created action\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: Need to ensure user is member of group, or group is public\n  */\n  public createGroupAction(req: IRequest, res: Response, next: NextFunction) {\n    req.body.start_at = req.body.start_at ? req.body.start_at : moment();\n    req.body.end_at = req.body.end_at ? req.body.end_at : moment().day(7).format(\"YYYY-MM-DD HH:MM:SS\");\n    req.body.points = req.body.points ? req.body.points : req.action_type.get('default_points');\n    req.body.created_by_user_id = req.user.get('user_id');\n    new Action(req.body).save()\n    .then(action=>{\n      return action.load(['creator', 'action_type']);\n    })\n    .then(action=>{\n      res.status(200).json({\n        success: 1,\n        action: action\n      })\n    })\n    .catch(err=>{\n      res.status(400).json({\n        success: 0,\n        message: err.message\n      })\n    })\n  }\n\n\n  /**\n  * @description updates details of a group\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: need to remove any data that shouldn't be updateable\n  * TODO: need to ensure user has proper permissions to udpate group\n  */\n  public putGroup(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, user_id, token) => {\n      if(err) {\n          res.status(401).json({\n          status: 'Token has expired',\n          message: 'Your token has expired.'\n        });\n      } else {\n        let group_id = parseInt(req.params.id);\n        toolHelpers.updateGroup(group_id, req.body, function(err, count) {\n          toolHelpers.getGroupById(group_id)\n            .then((group) => {\n              res.status(200).json({\n                status: 'success',\n                token: tokenHelper.encodeToken(user_id),\n                group: group\n              });\n          });\n        });\n      }\n    });\n  }\n\n  /**\n  * @description Allows user to join a group\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: need to ensure group is public, or member has group add code\n  */\n  public joinGroup(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, user_id, token) => {\n      if(err) {\n          res.status(401).json({\n          status: 'Token has expired',\n          message: 'Your token has expired.'\n        });\n      } else {\n        let group_id = parseInt(req.params.id);\n        // TODO: ensure user is not a current member of the group\n        toolHelpers.joinGroup(group_id, user_id, function() {\n          toolHelpers.getGroupById(group_id)\n            .then((group) => {\n              res.status(200).json({\n                status: 'success',\n                token: tokenHelper.encodeToken(user_id),\n                group: group\n              });\n          });\n        });\n      }\n    });\n  }\n\n  /**\n  * @description Allows user to join a group\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: Need to ensure user is member of group, or group is public\n  */\n  public getGroupMembers(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, user_id, token) => {\n      if(err) {\n          res.status(401).json({\n            status: 'Token has expired',\n            message: 'Your token has expired.'\n          });\n      } else {\n        let group_id = parseInt(req.params.id);\n        var members = toolHelpers.getGroupMembers(group_id, function(err, members) {\n          if(err) {\n            res.status(400).json({\n              status: 'error',\n              message: 'Something went wrong.'\n            });\n          } else {\n            res.status(200).json({\n              status: 'success',\n              token: tokenHelper.encodeToken(user_id),\n              members: members\n            });\n          }\n        });\n      }\n    });\n  }\n\n\n  /**\n  * @description Gets a specific group action (by ID)\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: Need to ensure user is member of group, or group is public\n  */\n  public getGroupAction(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, cur_user_id) => {\n      if(err) {\n        res.status(400).json({\n          status: 'error',\n          message: 'Something went wrong.'\n        });\n      } else {\n        let group_id = parseInt(req.params.id);\n        let action_id = parseInt(req.params.action_id);\n        toolHelpers.getActionById(action_id, group_id)\n        .then((action) => {\n          res.status(200).json({\n            status: 'success',\n            token: tokenHelper.encodeToken(cur_user_id),\n            action: action\n          });\n        })\n        .catch((err) => {\n          console.log(util.inspect(err));\n          res.status(401).json({\n            status: 'error',\n            message: 'Something went wrong, and we didn\\'t retreive the action. :('\n          });\n        });\n      }\n    });\n  }\n\n  /**\n  * @description adds record to mark an action as complete\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: Make sure user is member of the group\n  */\n  public markGroupActionComplete(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, cur_user_id) => {\n      if(err) {\n        res.status(400).json({\n          status: 'error',\n          message: 'Something went wrong.'\n        });\n      } else {\n        let group_id = parseInt(req.params.id);\n        let action_id = parseInt(req.params.action_id);\n        toolHelpers.createActionUser(action_id, cur_user_id)\n        .then((action) => {\n          res.status(200).json({\n            status: 'success',\n            token: tokenHelper.encodeToken(cur_user_id)\n          });\n        })\n        .catch((err) => {\n          console.log(util.inspect(err));\n          res.status(401).json({\n            status: 'error',\n            message: 'Something went wrong, and we didn\\'t retreive the action. :('\n          });\n        });\n      }\n    });\n  }\n\n  /**\n  * @description returns an array of supported action types\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  */\n  public getActionTypes(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, cur_user_id) => {\n      if(err) {\n        res.status(400).json({\n          status: 'error',\n          message: 'Something went wrong.'\n        });\n      } else {\n        toolHelpers.getActionTypes()\n        .then((action_types) => {\n          res.status(200).json({\n            status: 'success',\n            token: tokenHelper.encodeToken(cur_user_id),\n            action_types: action_types\n          });\n        })\n        .catch((err) => {\n          console.log(util.inspect(err));\n          res.status(401).json({\n            status: 'error',\n            message: 'Something went wrong, and we didn\\'t retreive the action types. :('\n          });\n        });\n      }\n    });\n  }\n\n  /**\n  * @description sets the deleted_at flag for the specified group\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: Make sure user has rights to delete the action (owner, admin)\n  */\n  public deleteGroupAction(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, cur_user_id) => {\n      if(err) {\n        res.status(400).json({\n          status: 'error',\n          message: 'Something went wrong.'\n        });\n      } else {\n        let group_id = parseInt(req.params.id);\n        let action_id = parseInt(req.params.action_id);\n        toolHelpers.getActionById(action_id, group_id).then((action) => {\n          toolHelpers.deleteAction(action_id, cur_user_id)\n          .then((result) => {\n            res.status(200).json({\n              status: 'success',\n              token: tokenHelper.encodeToken(cur_user_id),\n              REMOVED: action\n            });\n          })\n          .catch((err) => {\n            console.log(util.inspect(err));\n            res.status(401).json({\n              status: 'error',\n              message: 'Something went wrong, and we didn\\'t retreive the action types. :('\n            });\n          });\n        });\n      }\n    });\n  }\n\n  /**\n  * @description updates the details of an action\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  * TODO: Make sure user has rights to update the action (owner, admin)\n  * TODO: Make sure only updateable fields are on res.body\n  */\n  public updateGroupAction(req: Request, res: Response, next: NextFunction) {\n    tokenHelper.getUserIdFromRequest(req, (err, cur_user_id) => {\n      if(err) {\n        res.status(400).json({\n          status: 'error',\n          message: 'Something went wrong.'\n        });\n      } else {\n        let group_id = parseInt(req.params.id);\n        let action_id = parseInt(req.params.action_id);\n        toolHelpers.updateAction(action_id, req.body)\n        .then((count) => {\n          toolHelpers.getActionById(action_id, group_id)\n          .then((action) => {\n            res.status(200).json({\n              status: 'success',\n              token: tokenHelper.encodeToken(cur_user_id),\n              action: action\n            });\n          });\n        })\n        .catch((err) => {\n          console.log(util.inspect(err));\n          res.status(401).json({\n            status: 'error',\n            message: 'Something went wrong, and we didn\\'t retreive the action. :('\n          });\n        });\n      }\n    });\n  }\n\n\n  /**\n   * Take each handler, and attach to one of the Express.Router's\n   * endpoints.\n   */\n  init() {\n    this.router.get('/', this.getPublicGroups);\n    this.router.post('/', toolHelpers.ensureAuthenticated, this.createGroup);\n    // this.router.get('/:id', this.getGroup);\n      // this.router.put('/:id', this.putGroup);\n      // this.router.get('/:id/members', this.getGroupMembers);\n      // this.router.post('/:id/members', this.joinGroup);\n      // this.router.put('/:id/members/:user_id', this.updateGroupMember);\n      // this.router.get('/:id/actions/types', this.getActionTypes);\n    this.router.get('/:group_id/actions', \n                    toolHelpers.ensureAuthenticated,\n                    validate(GroupValidation.getGroupActions),\n                    groupHelper.checkGroup,\n                    groupHelper.checkUserPermissionAccessGroup,\n                    this.getGroupActions);\n    this.router.post('/:group_id/actions', \n                    toolHelpers.ensureAuthenticated,\n                    validate(GroupValidation.createGroupAction),\n                    groupHelper.checkGroup,\n                    groupHelper.checkActionType,\n                    groupHelper.checkUserBelongsToGroup,\n                    groupHelper.checkUserPermissionModifyGroupActions,\n                    this.createGroupAction);\n      // this.router.get('/:id/actions/:action_id', this.getGroupAction);\n      // this.router.put('/:id/actions/:action_id', this.updateGroupAction);\n      // this.router.delete('/:id/actions/:action_id', this.deleteGroupAction);\n      // this.router.post('/:id/actions/:action_id/complete', this.markGroupActionComplete);\n  }\n}\n\n\n\n// Create the GroupRouter, and export its configured Express.Router\nconst groupRoutes = new GroupRouter();\ngroupRoutes.init();\n\nexport default groupRoutes.router;\n"]}