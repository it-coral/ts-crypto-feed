{"version":3,"file":"/home/pioneer/work/jason/actodo_api/src/classes/ParamValidator.ts","sources":["/home/pioneer/work/jason/actodo_api/src/classes/ParamValidator.ts"],"names":[],"mappings":"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","sourcesContent":["\nvar Joi = require('joi');\nvar assignIn = require('lodash/assignIn');\nvar find = require('lodash/find');\nvar defaults = require('lodash/defaults');\nvar ValidationError = require('./validation-error');\n\nvar defaultOptions = {\n  contextRequest: false,\n  allowUnknownHeaders: true,\n  allowUnknownBody: true,\n  allowUnknownQuery: true,\n  allowUnknownParams: true,\n  allowUnknownCookies: true,\n  status: 400,\n  statusText: 'Bad Request'\n};\nvar globalOptions = {};\n\n// maps the corresponding request object to an `express-validation` option\nvar unknownMap = {\n  headers: 'allowUnknownHeaders',\n  body: 'allowUnknownBody',\n  query: 'allowUnknownQuery',\n  params: 'allowUnknownParams',\n  cookies: 'allowUnknownCookies'\n};\n\nexports = module.exports = function (schema) {\n  if (!schema) throw new Error('Please provide a validation schema');\n\n  return function (req, res, next)  {\n    var errors = [];\n\n    // Set default options\n    var options = defaults({}, schema.options || {}, globalOptions, defaultOptions);\n\n    // NOTE: mutates `errors`\n    ['headers', 'body', 'query', 'params', 'cookies'].forEach(function (key) {\n      var allowUnknown = options[unknownMap[key]];\n      var entireContext = options.contextRequest ? req : null;\n      if (schema[key]) validate(errors, req[key], schema[key], key, allowUnknown, entireContext);\n    });\n\n    if (errors && errors.length === 0) return next();\n\n    var err = new ValidationError(errors, options);\n    res.status(400).json({\n      success: 0,\n      message: 'ValidationError',\n      data: err.errors});\n  };\n};\n\nexports.ValidationError = ValidationError;\n\nexports.options = function (opts) {\n  if (!opts) {\n    globalOptions = {};\n    return;\n  }\n\n  globalOptions = defaults({}, globalOptions, opts);\n};\n\n/**\n * validate checks the current `Request` for validations\n * NOTE: mutates `request` in case the object is valid.\n */\nfunction validate (errObj, request, schema, location, allowUnknown, context) {\n  if (!request || !schema) return;\n\n  var joiOptions = {\n    context: context || request,\n    allowUnknown: allowUnknown,\n    abortEarly: false\n  };\n\n  Joi.validate(request, schema, joiOptions, function (errors, value) {\n    if (!errors || errors.details.length === 0) {\n      assignIn(request, value); // joi responses are parsed into JSON\n      return;\n    }\n    errors.details.forEach(function (error) {\n      var errorExists = find(errObj, function (item) {\n        if (item && item.field === error.path && item.location === location) {\n          item.messages.push(error.message);\n          item.types.push(error.type);\n          return item;\n        }\n        return;\n      });\n\n      if (!errorExists) {\n        errObj.push({\n          field: error.path,\n          location: location,\n          messages: [error.message],\n          types: [error.type]\n        });\n      }\n\n    });\n  });\n};\n"]}