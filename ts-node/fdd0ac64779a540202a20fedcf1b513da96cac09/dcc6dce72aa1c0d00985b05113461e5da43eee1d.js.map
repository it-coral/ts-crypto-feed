{"version":3,"file":"/home/pioneer/work/jason/actodo_api/src/routes/AuthRouter.ts","sources":["/home/pioneer/work/jason/actodo_api/src/routes/AuthRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Router, Request, Response, NextFunction} from 'express';\nimport {IRequest} from '../classes/IRequest';\nconst validate = require('../classes/ParamValidator');\nimport AuthValidation from '../validations/AuthValidation';\n\nvar request = require('request');\n\nconst tokenHelpers = require('../tools/tokens');\nconst toolHelpers = require('../tools/_helpers');\nvar util = require('util');\nimport User from '../db/models/user';\n\nexport class AuthRouter {\n  router: Router\n\n  /**\n   * Initialize the AuthRouter\n   */\n  constructor() {\n    this.router = Router();\n    this.init();\n  }\n\n/**\n * Creates new user record in database\n * @param  req Request object\n * @param  res Response object\n * @param  next NextFunction that is called\n * @return 200 JSON of user object\n * TODO: throw error if email or username already exists : Done\n */\n  public register(req: IRequest, res: Response, next: NextFunction) {\n    return new User(req.body).save()\n    .then((user) => {\n      req.user = user.toJSON();\n      delete req.user['password'];\n      return tokenHelpers.encodeToken(user.get('user_id'));\n    })\n    .then((token) => {\n      res.status(200).json({\n        success: 1,\n        user: req.user,\n        token: token\n      });\n    })\n    .catch((err) => {\n      res.status(400).json({\n        success: 0,\n        message: err.message,\n        data: err.data,\n        user: {},\n        token: \"\",\n      });\n    });\n  }\n\n /**\n  * Logs the user in. Expects email and password in request object.\n  * @param  req Request object\n  * @param  res Response object\n  * @param  next NextFunction that is called\n  * @return 200 JSON of user object and auth token\n  */\n  public login(req: IRequest, res: Response, next: NextFunction) {\n    const email = req.body.email;\n    const password = req.body.password;\n    return User.where({email : email}).fetch()\n    .then((user) => {\n      if(!user)\n        throw Error(\"Invalid email address\");\n      user.authenticate(password);\n      req.user = user.toJSON();\n      delete req.user['password'];\n      return user;\n    })\n    .then((response) => {\n      return tokenHelpers.encodeToken(response.id);\n    })\n    .then((token) => {\n      res.status(200).json({\n        success: 1,\n        token: token,\n        user: req.user\n      });\n    })\n    .catch((err) => {\n      res.status(401).json({\n        success: 0,\n        user: {},\n        token: \"\",\n        message: err.message\n      });\n    });\n  }\n\n  public loginFacebook(req: IRequest, res: Response, next: NextFunction) {\n    const email = req.body.email;\n    return User.where({email : email}).fetch()\n    .then((user) => {\n      if(!user){\n        return new User(req.body).save()\n        .then((user) => {\n          req.user = user.toJSON();\n          delete req.user['password'];\n          return user;\n        })\n      }\n      else{\n        req.user = user.toJSON();\n        delete req.user['password'];\n        return user;\n      }\n    })\n    .then((user) => {\n      return tokenHelpers.encodeToken(user.id);\n    })\n    .then((token) => {\n      res.status(200).json({\n        success: 1,\n        token: token,\n        user: req.user\n      });\n    })\n    .catch((err) => {\n      res.status(401).json({\n        success: 0,\n        message: err.message\n      });\n    });\n  //   var fields = ['id', 'email', 'first_name', 'last_name', 'link', 'name'];\n  //   var accessTokenUrl = 'https://graph.facebook.com/v2.5/oauth/access_token';\n  //   var graphApiUrl = 'https://graph.facebook.com/v2.5/me?fields=' + fields.join(',');\n  //   var params = {\n  //     code: req.body.code,\n  //     client_id: req.body.clientId,\n  //     client_secret: config.FACEBOOK_SECRET,\n  //     redirect_uri: req.body.redirectUri\n  //   };\n\n  //   // Step 1. Exchange authorization code for access token.\n  //   request.get({ url: accessTokenUrl, qs: params, json: true }, function(err, response, accessToken) {\n  //     if (response.statusCode !== 200) {\n  //       return res.status(500).send({ message: accessToken.error.message });\n  //     }\n\n  //     // Step 2. Retrieve profile information about the current user.\n  //     request.get({ url: graphApiUrl, qs: accessToken, json: true }, function(err, response, profile) {\n  //       if (response.statusCode !== 200) {\n  //         return res.status(500).send({ message: profile.error.message });\n  //       }\n  //       if (req.header('Authorization')) {\n  //         User.findOne({ facebook: profile.id }, function(err, existingUser) {\n  //           if (existingUser) {\n  //             return res.status(409).send({ message: 'There is already a Facebook account that belongs to you' });\n  //           }\n  //           var token = req.header('Authorization').split(' ')[1];\n  //           var payload = jwt.decode(token, config.TOKEN_SECRET);\n  //           User.findById(payload.sub, function(err, user) {\n  //             if (!user) {\n  //               return res.status(400).send({ message: 'User not found' });\n  //             }\n  //             user.facebook = profile.id;\n  //             user.picture = user.picture || 'https://graph.facebook.com/v2.3/' + profile.id + '/picture?type=large';\n  //             user.displayName = user.displayName || profile.name;\n  //             user.save(function() {\n  //               var token = createJWT(user);\n  //               res.send({ token: token });\n  //             });\n  //           });\n  //         });\n  //       } else {\n  //         // Step 3. Create a new user account or return an existing one.\n  //         User.findOne({ facebook: profile.id }, function(err, existingUser) {\n  //           if (existingUser) {\n  //             var token = createJWT(existingUser);\n  //             return res.send({ token: token });\n  //           }\n  //           var user = new User();\n  //           user.facebook = profile.id;\n  //           user.picture = 'https://graph.facebook.com/' + profile.id + '/picture?type=large';\n  //           user.displayName = profile.name;\n  //           user.save(function() {\n  //             var token = createJWT(user);\n  //             res.send({ token: token });\n  //           });\n  //         });\n  //       }\n  //     });\n  //   });\n  // });\n\n  }\n  /**\n   * Take each handler, and attach to one of the Express.Router's\n   * endpoints.\n   */\n  init() {\n    this.router.post('/register', validate(AuthValidation.register), this.register);\n    this.router.post('/login', validate(AuthValidation.login), this.login);\n    this.router.post('/facebook', validate(AuthValidation.loginFacebook), this.loginFacebook);\n  }\n\n}\n\n\n\n// Create the AuthRouter, and export its configured Express.Router\nconst authRoutes = new AuthRouter();\nauthRoutes.init();\n\nexport default authRoutes.router;\n"]}