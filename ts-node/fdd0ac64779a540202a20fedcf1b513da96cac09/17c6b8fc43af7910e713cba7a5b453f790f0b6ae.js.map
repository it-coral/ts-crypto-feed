{"version":3,"file":"/home/pioneer/work/jason/actodo_api/src/routes/UserRouter.ts","sources":["/home/pioneer/work/jason/actodo_api/src/routes/UserRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Router, Request, Response, NextFunction} from 'express';\nimport {IRequest} from '../classes/IRequest';\nconst tokenHelper = require('../tools/tokens');\nconst toolHelpers = require('../tools/_helpers');\nconst validate = require('../classes/ParamValidator');\nimport UserValidation from '../validations/UserValidation';\n\nimport bluebird from 'bluebird';\nvar util = require('util');\nimport User from '../db/models/user';\nimport Group from '../db/models/group';\nimport ActionUser from '../db/models/action_user';\nimport GroupUser from '../db/models/group_user';\nimport Action from '../db/models/action';\n\nvar path = require('path'),\n    fs = require('fs');\n\nexport class UserRouter {\n  router: Router\n\n\n  /**\n   * Initialize the AuthRouter\n   */\n  constructor() {\n    this.router = Router();\n    this.init();\n  }\n\n  /**\n   * @description Gets a user object for logged in user\n   * @param  req Request object\n   * @param  res Response object\n   * @param  next NextFunction that is called\n   * @return 200 JSON of user object\n   */\n    public getUser(req: IRequest, res: Response, next: NextFunction) {\n      if(req.params.id) {\n        return User.where({user_id:parseInt(req.params.id)}).fetch({\n          columns: ['user_id',\n                    'created_at',\n                    'username',\n                    'first_name',\n                    'avatar_file',\n                    'bio',\n                    'longitude',\n                    'latitude',\n                   ]\n        })\n        .asCallback((err, user) => {\n          if(err)\n            throw err;\n          else if(user == null)\n            res.status(400).json({\n              success: 1,\n              message: \"No user id\"\n            })\n          else{\n            res.status(200).json({\n              success: 1,\n              user: user\n            });\n          }\n        })\n        .catch(function(err){\n          res.status(400).json({\n            success: 0,\n            message: err.message\n          })\n        });\n      } else {\n        let filter = req.user.toJSON();\n        delete filter['password'];\n        res.status(200).json({\n          success: 1,\n          token: tokenHelper.encodeToken(req.user.id),\n          user: filter\n        });\n      }\n    }\n\n    /**\n    * @description Updates/Saves the current user's information\n    * @param Request\n    * @param Response\n    * @param Callback function (NextFunction)\n    */  \n    public putUser(req: IRequest, res: Response, next: NextFunction) {\n      return req.user.save(req.body)\n      .then((user) => {\n        req.user = user;\n        if(req.files){\n          try{\n            let file = req.files.avatar_file;\n            var targetPath = path.resolve('./public/uploads/users/avatars/'+req.user.get('user_id')+path.extname(file.name).toLowerCase());\n            if ((path.extname(file.name).toLowerCase() === '.jpg')||\n                (path.extname(file.name).toLowerCase() === '.png')) { \n\n              file.mv(targetPath, function(err) {\n                if (err) {\n                  err.message = \"Upload failed\";\n                  throw err;\n                }\n                else {\n                  return true;\n                }\n              });   \n              return true;  \n            } else {\n              let err = new Error();\n              err.message = \"Only jpg/png are acceptable\";\n              throw err;\n            }\n          }catch(err){\n            throw err;\n          }\n        }\n        else{\n          return false;\n        }\n      })\n      .then((isUploadSuccess)=>{\n        if(isUploadSuccess){\n          let image_url = toolHelpers.getBaseUrl(req) + 'uploads/users/avatars/'+req.user.get('user_id')+path.extname(req.files.avatar_file.name).toLowerCase();\n             \n          return req.user.save({avatar_file:image_url});\n        }\n        else\n          return req.user;\n      })\n      .then((user) => {\n        req.user = user;\n        return tokenHelper.encodeToken(user.get('user_id')); \n      })\n      .then((token) => {\n        let filter = req.user.toJSON();\n        delete filter['password'];\n        res.status(200).json({\n          success: 1,\n          token: token,\n          user: filter,\n          message:\"Success\"\n        });\n      })\n      .catch((err) => {\n        res.status(500).json({\n          success: 0,\n          message:err.message,\n          data:err.data,  \n          user:{},\n          token:\"\"\n        });\n      });\n    }\n\n    /**\n    * @description Gets list of groups user belongs to\n    * @param Request\n    * @param Response\n    * @param Callback function (NextFunction)\n    */\n    public getGroups(req: IRequest, res: Response, next: NextFunction) {\n      let uid;\n\n      if(!req.params.id) {\n        uid = req.user.id;\n      }\n      else\n        uid = parseInt(req.params.id);\n      User.where({user_id: uid}).fetch({\n        withRelated: [ 'groups']\n      })\n      .asCallback((err, user) => {\n        if(err) return res.status(500).json({success: 0, message:err.message, token:\"\", groups:[]});\n        if(user == null)  return res.status(500).json({success:0, message:\"Invalid userid\"});\n        return res.status(200).json({\n          success: 1,\n          groups: user.related('groups')  \n        });\n      });\n    }\n    public putUserpassword(req: IRequest, res: Response, next: NextFunction) {\n      try{\n        req.user.authenticate(req.body.original_password);\n        \n        req.user.save({ \n          password:req.body.new_password })\n        .then((user) => {\n          req.user = user;\n          return tokenHelper.encodeToken(user.get('user_id')); \n        })\n        .then((token) => {\n          let filter = req.user.toJSON();\n          delete filter['password'];\n          res.status(200).json({\n            success: 1,\n            token: token,\n            user: filter,\n            message:\"Success\"\n          });\n        })\n        .catch((err) => {\n          res.status(500).json({\n            success: 0,\n            message:err.message,\n            data:err.data,\n          });\n        });\n      }catch(err){\n        res.status(400).json({\n          success: 0,\n          message: err.message,\n          data: []\n        })\n      }\n    }\n  \n    /**\n    * @description Gets list of actions user can perform\n    *              skip = 0 and deleted_at=null\n    * @param Request\n    * @param Response\n    * @param Callback function (NextFunction)\n    */\n\n    public getActions(req: IRequest, res: Response, next: NextFunction) {\n\n      var skipnfinishActionIDs = [];\n      var userGroupsIDs = [];\n      ActionUser.collection().query(function(qb) {\n        qb.where('user_id', '=', req.user.get('user_id'))\n      }).fetch({columns:['action_id']})\n      .then(skipnfinish=>{\n        skipnfinishActionIDs = skipnfinish.toJSON().map((actionuser)=>{return actionuser.action_id});\n        return GroupUser.collection().query(function(qb) {\n          qb.where('user_id', '=', req.user.get('user_id'))\n        }).fetch({columns:['group_id']});\n      })\n      .then(groups=>{\n        userGroupsIDs = groups.toJSON().map((group)=>{return group.group_id});\n\n        return Action.collection().query(function(qb) {\n          qb.whereIn('group_id', userGroupsIDs).whereNotIn('action_id', skipnfinishActionIDs)\n        }).fetch({withRelated:[\n          {'creator':function(qb) {\n            qb.column('user_id', 'first_name', 'last_name', 'avatar_file');\n          }},\n          'action_type']})\n      })\n      .then(actions=>{\n        res.status(200).json({\n          success: 1,\n          actions:actions\n        });\n      })\n      .catch(err=>{\n        res.status(400).json({\n          success: 0,\n          message: err.message,\n        })\n      })\n      // var nonskipIDs = [];\n      // ActionUser.collection().query(function(qb) {\n      //   qb.where('user_id', '=', req.user.get('user_id')).andWhere('skip', '=', false)\n      // }).fetch({columns:['action_id']})\n      // .then(nonskip=>{\n      //   nonskipIDs = nonskip.toJSON().map((actionuser)=>{return actionuser.action_id});\n      //   return User.where(function(qb) {\n      //     qb.where('user_id', '=', req.user.get('user_id'))\n      //   }).fetch({withRelated:[\n      //     {'actions.creator':function(qb) {\n      //       qb.column('user_id', 'first_name', 'last_name', 'avatar_file');\n      //     }},\n      //     'actions.action_type']})\n      // })\n      // .then(user=>{\n      //   return user.related('actions').query(function(qb){\n      //     qb.whereIn('action.action_id', nonskipIDs)\n      //   }).fetch().then(result=>{\n      //     res.status(200).json({\n      //       actions:result\n      //     });\n      //   })\n      // })\n      // .catch(err=>{\n      //   res.status(400).json({\n      //     success: 0,\n      //     message: err.message,\n      //   })\n      // })\n    }\n  /**\n   * Take each handler, and attach to one of the Express.Router's\n   * endpoints.\n   */\n  init() {  \n    // Routes for /api/v1/user\n    this.router.get('/', this.getUser);\n    this.router.put('/', validate(UserValidation.putUser), this.putUser);\n    this.router.put('/password', validate(UserValidation.putUserpassword), this.putUserpassword);\n    this.router.get('/groups',  this.getGroups);\n    this.router.get('/actions',  this.getActions);\n    this.router.get('/:id', validate(UserValidation.getUser), this.getUser);\n    this.router.get('/:id/groups', validate(UserValidation.getUserGroups), this.getGroups);\n  }\n\n}\n\n// Create the AuthRouter, and export its configured Express.Router\nconst authRoutes = new UserRouter();\nauthRoutes.init();\n\nexport default authRoutes.router;\n"]}