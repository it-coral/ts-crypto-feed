{"version":3,"file":"/home/pioneer/work/jason/actodo_api/test/integration/routes.group.test.ts","sources":["/home/pioneer/work/jason/actodo_api/test/integration/routes.group.test.ts"],"names":[],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\n\nimport * as mocha from 'mocha';\nimport * as chai from 'chai';\nimport app from '../../src/App';\n\nconst should = chai.should();\nconst environment = \"test\";\nconst config = require('../../knexfile.js')[environment];\nexport var knex = require('knex')(config);\n\nvar util = require('util');\n\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\n\ndescribe('********* routes : group *********', function(){\n  \n  this.timeout(30000);\n  before(() => {\n\n    return knex.migrate.rollback()\n    .then(() => { return knex.migrate.latest(); })\n    .then(() => { return knex.seed.run(); })\n  });\n\n  after(() => {\n    return knex.migrate.rollback();\n  });\n\n\t// describe('GET /groups/{group_id}/actions', () => {\n\t// \tvar token = \"\";\n\t// \tit('should return success login with jasonh and /groups/1/actions', (done) => {\n\t// \t\tchai.request(app)\n\t// \t\t.post('/api/v1/auth/login')\n\t// \t\t.send({\n\t// \t\t\temail: 'jasonh@actodo.co',\n\t// \t\t\tpassword: 'letmein'\n\t// \t\t})\n\t// \t\t.end((error, response) => {\n\t// \t\t\tshould.not.exist(error);\n\t// \t\t\ttoken = response.body.token;\n\t// \t\t\tchai.request(app)\n\t// \t\t\t.get('/api/v1/groups/1/actions')\n\t// \t\t\t.set('authorization', 'Bearer ' + response.body.token)\n\t// \t\t\t.end((err, res) => {\n\t// \t\t\t\tshould.not.exist(err);\n\t// \t\t\t\tres.status.should.eql(200);\n\t// \t\t\t\tres.type.should.eql('application/json');\n\t// \t\t\t\tres.body.success.should.eql(1);\n\t// \t\t\t\tres.body.should.have.property('actions');\n\t// \t\t\t\tdone();\n\t// \t\t\t});\n\t// \t\t});\n\t// \t});\n\t// \tit('should return No permission /groups/2/actions; 2 is private group', (done) => {\n\t// \t\tchai.request(app)\n\t// \t\t.get('/api/v1/groups/2/actions')\n\t// \t\t.set('authorization', 'Bearer ' + token)\n\t// \t\t.end((err, res) => {\n\t// \t\t\tshould.exist(err);\n\t// \t\t\tres.status.should.eql(403);\n\t// \t\t\tres.type.should.eql('application/json');\n\t// \t\t\tres.body.success.should.eql(0);\n\t// \t\t\tdone();\n\t// \t\t});\n\t// \t});\n\n\t// \tit('should return Not Found /groups/6/actions; 6 is non-exist', (done) => {\n\t// \t\tchai.request(app)\n\t// \t\t.get('/api/v1/groups/6/actions')\n\t// \t\t.set('authorization', 'Bearer ' + token)\n\t// \t\t.end((err, res) => {\n\t// \t\t\tshould.exist(err);\n\t// \t\t\tres.status.should.eql(404);\n\t// \t\t\tres.type.should.eql('application/json');\n\t// \t\t\tres.body.success.should.eql(0);\n\t// \t\t\tdone();\n\t// \t\t});\n\t// \t});\n\n\t// \tit('should return success log in with erwin and /groups/2/actions', (done) => {\n\t// \t\tchai.request(app)\n\t// \t\t.post('/api/v1/auth/login')\n\t// \t\t.send({\n\t// \t\t\temail: 'erwin@actodo.co',\n\t// \t\t\tpassword: 'letmein'\n\t// \t\t})\n\t// \t\t.end((error, response) => {\n\t// \t\t\tshould.not.exist(error);\n\t// \t\t\ttoken = response.body.token;\n\t// \t\t\tchai.request(app)\n\t// \t\t\t.get('/api/v1/groups/2/actions')\n\t// \t\t\t.set('authorization', 'Bearer ' + response.body.token)\n\t// \t\t\t.end((err, res) => {\n\t// \t\t\t\tshould.not.exist(err);\n\t// \t\t\t\tres.status.should.eql(200);\n\t// \t\t\t\tres.type.should.eql('application/json');\n\t// \t\t\t\tres.body.success.should.eql(1);\n\t// \t\t\t\tres.body.should.have.property('actions');\n\t// \t\t\t\tdone();\n\t// \t\t\t});\n\t// \t\t});\n\t// \t});\n\t// });\n\tdescribe('POST /groups/{group_id}/actions', () => {\n\t\tvar token = \"\";\n\t\tit('should return success login with jasonh and fails without action_type_id', (done) => {\n\t\t\tchai.request(app)\n\t\t\t.post('/api/v1/auth/login')\n\t\t\t.send({\n\t\t\t\temail: 'jasonh@actodo.co',\n\t\t\t\tpassword: 'letmein'\n\t\t\t})\n\t\t\t.end((error, response) => {\n\t\t\t\tshould.not.exist(error);\n\t\t\t\ttoken = response.body.token;\n\t\t\t\tchai.request(app)\n\t\t\t\t.post('/api/v1/groups/1/actions')\n\t\t\t\t.set('authorization', 'Bearer ' + response.body.token)\n\t\t\t\t.send({\n\t\t\t\t\ttitle: \"New Title\",\n\t\t\t\t\tsubtitle: \"SubTitle\",\n\t\t\t\t\tdescription: \"Description\",\n\t\t\t\t\tthanks_msg: \"Thanks\",\n\t\t\t\t\tstart_at: \"2017-03-03 11:49:23\",\n\t\t\t\t\tparam1: \"Value\"\n\t\t\t\t})\n\t\t\t\t.end((err, res) => {\n\t\t\t\t\tshould.exist(err);\n\t\t\t\t\tres.status.should.eql(400);\n\t\t\t\t\tres.type.should.eql('application/json');\n\t\t\t\t\tres.body.success.should.eql(0);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tit('should return No permission /groups/2/actions; json is not member of group2', (done) => {\n\t\t\tchai.request(app)\n\t\t\t.post('/api/v1/groups/2/actions')\n\t\t\t.set('authorization', 'Bearer ' + token)\n\t\t\t.send({\n\t\t\t\ttitle: \"New Title\",\n\t\t\t\tsubtitle: \"SubTitle\",\n\t\t\t\tdescription: \"Description\",\n\t\t\t\tthanks_msg: \"Thanks\",\n\t\t\t\tstart_at: \"2017-03-03 11:49:23\",\n\t\t\t\taction_type_id: 1,\n\t\t\t\tparam1: \"Value\"\n\t\t\t})\n\t\t\t.end((err, res) => {\n\t\t\t\tshould.exist(err);\n\t\t\t\tres.status.should.eql(403);\n\t\t\t\tres.type.should.eql('application/json');\n\t\t\t\tres.body.success.should.eql(0);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n\t\tit('should return error on /groups/1/actions;with action_type_id 100:non exist ', (done) => {\n\t\t\tchai.request(app)\n\t\t\t.post('/api/v1/groups/2/actions')\n\t\t\t.set('authorization', 'Bearer ' + token)\n\t\t\t.send({\n\t\t\t\ttitle: \"New Title\",\n\t\t\t\tsubtitle: \"SubTitle\",\n\t\t\t\tdescription: \"Description\",\n\t\t\t\tthanks_msg: \"Thanks\",\n\t\t\t\tstart_at: \"2017-03-03 11:49:23\",\n\t\t\t\taction_type_id: 100,\n\t\t\t\tparam1: \"Value\"\n\t\t\t})\n\t\t\t.end((err, res) => {\n\t\t\t\tshould.exist(err);\n\t\t\t\tres.status.should.eql(404);\n\t\t\t\tres.type.should.eql('application/json');\n\t\t\t\tres.body.success.should.eql(0);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n\t\tit('should return Not Found /groups/100/actions; 100 is non-exist', (done) => {\n\t\t\tchai.request(app)\n\t\t\t.post('/api/v1/groups/100/actions')\n\t\t\t.set('authorization', 'Bearer ' + token)\n\t\t\t.send({\n\t\t\t\ttitle: \"New Title\",\n\t\t\t\tsubtitle: \"SubTitle\",\n\t\t\t\tdescription: \"Description\",\n\t\t\t\tthanks_msg: \"Thanks\",\n\t\t\t\tstart_at: \"2017-03-03 11:49:23\",\n\t\t\t\taction_type_id: 1,\n\t\t\t\tparam1: \"Value\"\n\t\t\t})\n\t\t\t.end((err, res) => {\n\t\t\t\tshould.exist(err);\n\t\t\t\tres.status.should.eql(404);\n\t\t\t\tres.type.should.eql('application/json');\n\t\t\t\tres.body.success.should.eql(0);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n\t\t// it('should return success log in with erwin and /groups/2/actions', (done) => {\n\t\t// \tchai.request(app)\n\t\t// \t.post('/api/v1/auth/login')\n\t\t// \t.send({\n\t\t// \t\temail: 'erwin@actodo.co',\n\t\t// \t\tpassword: 'letmein'\n\t\t// \t})\n\t\t// \t.end((error, response) => {\n\t\t// \t\tshould.not.exist(error);\n\t\t// \t\ttoken = response.body.token;\n\t\t// \t\tchai.request(app)\n\t\t// \t\t.get('/api/v1/groups/2/actions')\n\t\t// \t\t.set('authorization', 'Bearer ' + response.body.token)\n\t\t// \t\t.end((err, res) => {\n\t\t// \t\t\tshould.not.exist(err);\n\t\t// \t\t\tres.status.should.eql(200);\n\t\t// \t\t\tres.type.should.eql('application/json');\n\t\t// \t\t\tres.body.success.should.eql(1);\n\t\t// \t\t\tres.body.should.have.property('actions');\n\t\t// \t\t\tdone();\n\t\t// \t\t});\n\t\t// \t});\n\t\t// });\n\t});\n//   describe('GET /api/v1/groups', () => {\n//     it('should return a success', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/groups')\n//       .end((err, res) => {\n//         should.not.exist(err);\n//         res.status.should.eql(200);\n//         res.type.should.eql('application/json');\n//         res.body.success.should.eql(1);\n//         done();\n//       });\n//     });\n\n//     it('should return array of groups and groups have settings, tags, creator', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/groups')\n//       .end((err, res) => {\n//         should.not.exist(err);\n//         res.status.should.eql(200);\n//         res.type.should.eql('application/json');\n//         res.body.should.have.property('groups');\n//         res.body.groups.should.include.keys('settings','tags','creator');\n//         done();\n//       });\n//     });\n    \n//   });\n\n// //   describe('GET /api/v1/groups/3', () => {\n// //     it('should return expected group', (done) => {\n// //       chai.request(app)\n// //       .get('/api/v1/groups/3')\n// //       .end((err, res) => {\n// //         should.not.exist(err);\n// //         res.status.should.eql(200);\n// //         res.type.should.eql('application/json');\n// //         res.body.should.have.property('group');\n// //         res.body.group.should.have.property('group_id');\n// //         res.body.group.group_id.should.equal(3);\n// //         done();\n// //       });\n// //     });\n// //   });\n\n// //   describe('POST /api/v1/groups', () => {\n// //     it('should create a new group', (done) => {\n// //       chai.request(app)\n// //       .post('/api/v1/auth/login')\n// //       .send({\n// //         email: 'seed1@test.net',\n// //         password: 'password'\n// //       })\n// //       .end((error, response) => {\n// //         should.not.exist(error);\n// //         chai.request(app)\n// //         .post('/api/v1/groups')\n// //         .set('authorization', 'Bearer ' + response.body.token)\n// //         .send({\n// //           created_by_user_id: 1,\n// //           name: 'TEST CREATE GROUP',\n// //           private: 0,\n// //           description: 'TEST CREATE GROUP DESCRIPTION',\n// //           welcome: 'WELCOME TO THE TEST CREATE GROUP',\n// //           banner_image_url: 'https://upload.wikimedia.org/wikipedia/en/8/86/Avatar_Aang.png',\n// //           latitude: '51.5032520',\n// //           longitude: '-0.1278990'\n// //         })\n// //         .end((err, res) => {\n// //           should.not.exist(err);\n// //           res.status.should.eql(200);\n// //           res.type.should.eql('application/json');\n// //           res.body.status.should.eql('success');\n// //           res.body.should.have.property('group');\n// //           res.body.group.should.have.property('name');\n// //           res.body.group.name.should.equal('TEST CREATE GROUP');\n// //           res.body.group.created_by_user_id.should.equal(1);\n// //           done();\n// //         });\n// //       });\n// //     });\n// //   });\n\n// //   describe('POST /api/v1/groups', () => {\n// //     it('return 401 unauthorized', (done) => {\n// //       chai.request(app)\n// //       .post('/api/v1/groups')\n// //       .send({\n// //         created_by_user_id: 1,\n// //         name: 'TEST CREATE GROUP',\n// //         private: 0,\n// //         description: 'TEST CREATE GROUP DESCRIPTION',\n// //         welcome: 'WELCOME TO THE TEST CREATE GROUP',\n// //         banner_image_url: 'https://upload.wikimedia.org/wikipedia/en/8/86/Avatar_Aang.png',\n// //         latitude: '51.5032520',\n// //         longitude: '-0.1278990'\n// //       })\n// //       .end((err, res) => {\n// //         should.exist(err);\n// //         res.status.should.eql(401);\n// //         done();\n// //       });\n// //     });\n// //   });\n\n// //   describe('PUT /api/v1/groups/1', () => {\n// //     it('should update group info and return updated group', (done) => {\n// //       chai.request(app)\n// //       .post('/api/v1/auth/login')\n// //       .send({\n// //         email: 'seed1@test.net',\n// //         password: 'password'\n// //       })\n// //       .end((error, response) => {\n// //         should.not.exist(error);\n// //         chai.request(app)\n// //         .put('/api/v1/groups/1')\n// //         .set('authorization', 'Bearer ' + response.body.token)\n// //         .send({'name':'NEWLY UPDATED NAME','private':1})\n// //         .end((err, resp) => {\n// //           should.not.exist(err);\n// //           resp.status.should.eql(200);\n// //           resp.should.be.json;\n// //           resp.body.should.be.a('object');\n// //           resp.body.should.have.property('group');\n// //           resp.body.group.should.have.property('group_id');\n// //           resp.body.group.group_id.should.equal(1);\n// //           resp.body.group.name.should.equal('NEWLY UPDATED NAME');\n// //           resp.body.group.name.should.not.equal('Test Group 1');\n// //           resp.body.group.private.should.equal(1);\n// //           done();\n// //         });\n// //       });\n// //     });\n// //     it('should return an error when not logged in', (done) => {\n// //       chai.request(app)\n// //       .put('/api/v1/groups/1')\n// //       .send({'name':'NEW','private':1})\n// //       .end((err, res) => {\n// //         should.exist(err);\n// //         res.status.should.eql(401);\n// //         done();\n// //       });\n// //     });\n// //   });\n\n// //   describe('POST /api/v1/groups/4/members', () => {\n// //     it('should add user to the group', (done) => {\n// //       chai.request(app)\n// //       .post('/api/v1/auth/login')\n// //       .send({\n// //         email: 'seed1@test.net',\n// //         password: 'password'\n// //       })\n// //       .end((error, response) => {\n// //         should.not.exist(error);\n// //         chai.request(app)\n// //         .post('/api/v1/groups/4/members')\n// //         .set('authorization', 'Bearer ' + response.body.token)\n// //         .end((err, res) => {\n// //           should.not.exist(err);\n// //           res.status.should.eql(200);\n// //           done();\n// //         });\n// //       });\n// //     });\n// //   });\n\n// //   describe('GET /api/v1/groups/1/members', () => {\n// //     it('should return list of group members', (done) => {\n// //       chai.request(app)\n// //       .post('/api/v1/auth/login')\n// //       .send({\n// //         email: 'seed1@test.net',\n// //         password: 'password'\n// //       })\n// //       .end((error, response) => {\n// //         should.not.exist(error);\n// //         chai.request(app)\n// //         .get('/api/v1/groups/1/members')\n// //         .set('authorization', 'Bearer ' + response.body.token)\n// //         .end((err, res) => {\n// //           should.not.exist(err);\n// //           res.status.should.eql(200);\n// //           res.should.be.json;\n// //           res.body.should.be.a('object');\n// //           res.body.should.have.property('members');\n// //           res.body.members[0].username.should.equal('seeder1');\n// //           done();\n// //         });\n// //       });\n// //     });\n// //   });\n\n// //   describe('PUT /api/v1/groups/1/members/2', () => {\n// //     it('should update the specified member\\'s group permissions ', (done) => {\n// //       chai.request(app)\n// //       .post('/api/v1/auth/login')\n// //       .send({\n// //         email: 'seed1@test.net',\n// //         password: 'password'\n// //       })\n// //       .end((error, response) => {\n// //         should.not.exist(error);\n// //         chai.request(app)\n// //         .put('/api/v1/groups/1/members/2')\n// //         .set('authorization', 'Bearer ' + response.body.token)\n// //         .send({'mod_actions':1,'submit_action':1})\n// //         .end((err, res) => {\n// //           should.not.exist(err);\n// //           res.status.should.eql(200);\n// //           res.should.be.json;\n// //           res.body.should.be.a('object');\n// //           res.body.should.have.property('members');\n// //           res.body.members[1].username.should.eql('seeder2');\n// //           res.body.members[1].mod_actions.should.eql(1);\n// //           res.body.members[1].submit_action.should.eql(1);\n// //           res.body.members[1].admin_settings.should.eql(0);\n// //           done();\n// //         });\n// //       });\n// //     });\n// //   });\n\n// //   describe('PUT /api/v1/groups/1/members/2', () => {\n// //     it('should return 401 unauthorized', (done) => {\n// //       chai.request(app)\n// //       .post('/api/v1/auth/login')\n// //       .send({\n// //         email: 'seed2@test.net',\n// //         password: 'password'\n// //       })\n// //       .end((error, response) => {\n// //         should.not.exist(error);\n// //         chai.request(app)\n// //         .put('/api/v1/groups/1/members/1')\n// //         .set('authorization', 'Bearer ' + response.body.token)\n// //         .send({'mod_actions':0,'submit_action':0})\n// //         .end((err, res) => {\n// //           should.exist(err);\n// //           res.status.should.eql(401);\n// //           done();\n// //         });\n// //       });\n// //     });\n// //   });\n\n});\n"]}