{"version":3,"file":"/home/pioneer/work/jason/actodo_api/src/App.ts","sources":["/home/pioneer/work/jason/actodo_api/src/App.ts"],"names":[],"mappings":";AACA,mCAAmC;AACnC,iCAAiC;AACjC,0CAA0C;AAC1C,MAAM,WAAW,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAChD,sDAA+C;AAC/C,oDAA6C;AAC7C,oDAA6C;AAC7C,wDAAiD;AACjD,IAAI,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC/C,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,kDAAkD;AAClD;IAKE,oDAAoD;IACpD;QACE,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,gCAAgC;IACxB,UAAU;QAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;QAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,2BAA2B;IACnB,MAAM;QACZ;;2BAEmB;QACnB,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAC9B,4BAA4B;QAC5B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI;YAC7B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,CAAC;gBACV,OAAO,EAAE,qBAAqB;gBAC9B,UAAU,EAAE,qBAAqB;aAClC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,qBAAW,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,oBAAU,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,mBAAmB,EAAE,oBAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,WAAW,CAAC,mBAAmB,EAAE,sBAAY,CAAC,CAAC;IAErF,CAAC;CAEF;;AAED,kBAAe,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC","sourcesContent":["import * as path from 'path';\nimport * as express from 'express';\nimport * as logger from 'morgan';\nimport * as bodyParser from 'body-parser';\nconst toolHelpers = require('./tools/_helpers');\nimport GroupRouter from './routes/GroupRouter';\nimport AuthRouter from './routes/AuthRouter';\nimport UserRouter from './routes/UserRouter';\nimport ActionRouter from './routes/ActionRouter';\nvar fileUpload = require('express-fileupload');\nvar moment = require('moment');\n// Creates and configures an ExpressJS web server.\nclass App {\n\n  // ref to Express instance\n  public express: express.Application;\n\n  //Run configuration methods on the Express instance.\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  // Configure Express middleware.\n  private middleware(): void {\n    this.express.use(logger('dev'));\n    this.express.use(fileUpload());\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    this.express.use(express.static(__dirname + '/../public')); \n  }\n\n  // Configure API endpoints.\n  private routes(): void {\n    /* This is just to get up and running, and to make sure what we've got is\n     * working so far. This function will change when we start to add more\n     * API endpoints */\n    let router = express.Router();\n    // placeholder route handler\n    router.get('/', (req, res, next) => {\n      res.status(200).json({\n        success: 1,\n        message: 'Action Now API v1.0',\n        lastChange: '02/20/2017 08:25 pm'\n      });\n    });\n\n    this.express.use('/api/:version', router);\n    this.express.use('/api/v1/groups', GroupRouter);\n    this.express.use('/api/v1/auth', AuthRouter);\n    this.express.use('/api/v1/user', toolHelpers.ensureAuthenticated, UserRouter);\n    this.express.use('/api/v1/actions', toolHelpers.ensureAuthenticated, ActionRouter);\n\n  }\n\n}\n\nexport default new App().express;\n  "]}