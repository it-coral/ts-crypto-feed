{"version":3,"file":"/home/pioneer/work/jason/actodo_api/test/integration/routes.action.test.ts","sources":["/home/pioneer/work/jason/actodo_api/test/integration/routes.action.test.ts"],"names":[],"mappings":";AAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAG9B,6BAA6B;AAG7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC7B,MAAM,WAAW,GAAG,MAAM,CAAC;AAC3B,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,WAAW,CAAC,CAAC;AAC9C,QAAA,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;AAE1C,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACtC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAEnB,QAAQ,CAAC,mCAAmC,EAAE;IAE5C,uBAAuB;IACvB,iBAAiB;IAEjB,mCAAmC;IACnC,mDAAmD;IACnD,6CAA6C;IAC7C,MAAM;IAEN,gBAAgB;IAChB,oCAAoC;IACpC,OAAO;IACP,sDAAsD;IACtD,oBAAoB;IACpB,yDAAyD;IACzD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,mCAAmC;IACnC,6BAA6B;IAC7B,WAAW;IACX,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,0DAA0D;IAC1D,gCAAgC;IAChC,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,6CAA6C;IAC7C,wBAAwB;IACxB,gCAAgC;IACjC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IAER,MAAM;IAEN,4DAA4D;IAC5D,oBAAoB;IACpB,yDAAyD;IACzD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,mCAAmC;IACnC,6BAA6B;IAC7B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,0DAA0D;IAC1D,gCAAgC;IAChC,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,8CAA8C;IAC9C,wBAAwB;IACxB,sCAAsC;IACvC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IAER,0EAA0E;IAC1E,wBAAwB;IACxB,sCAAsC;IACvC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IAGR,8FAA8F;IAC9F,wBAAwB;IACxB,sCAAsC;IACvC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,gFAAgF;IAChF,wBAAwB;IACxB,wCAAwC;IACzC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,MAAM;IAEN,gEAAgE;IAChE,oBAAoB;IACpB,yDAAyD;IACzD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,mCAAmC;IACnC,6BAA6B;IAC7B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,0DAA0D;IAC1D,gCAAgC;IAChC,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,kDAAkD;IAClD,wBAAwB;IACxB,0CAA0C;IAC3C,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IAER,4EAA4E;IAC5E,wBAAwB;IACxB,0CAA0C;IAC3C,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,gGAAgG;IAChG,wBAAwB;IACxB,0CAA0C;IAC3C,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,kFAAkF;IAClF,wBAAwB;IACxB,4CAA4C;IAC7C,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,MAAM;IAEN,sDAAsD;IACtD,oBAAoB;IACpB,yDAAyD;IACzD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,mCAAmC;IACnC,6BAA6B;IAC7B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,0DAA0D;IAC1D,gCAAgC;IAChC,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,gDAAgD;IAChD,wBAAwB;IACxB,gCAAgC;IACjC,+CAA+C;IAC9C,cAAc;IACd,4BAA4B;IAC5B,iCAAiC;IACjC,oBAAoB;IACpB,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,0DAA0D;IAC1D,wCAAwC;IACxC,uDAAuD;IACvD,iBAAiB;IACjB,UAAU;IACV,QAAQ;IAER,8FAA8F;IAC9F,wBAAwB;IACxB,gCAAgC;IACjC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,gFAAgF;IAChF,wBAAwB;IACxB,kCAAkC;IACnC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,MAAM;IAEN,yDAAyD;IACzD,oBAAoB;IACpB,yDAAyD;IACzD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,mCAAmC;IACnC,6BAA6B;IAC7B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,0DAA0D;IAC1D,gCAAgC;IAChC,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,gDAAgD;IAChD,wBAAwB;IACxB,gCAAgC;IACjC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IAER,0EAA0E;IAC1E,wBAAwB;IACxB,gCAAgC;IACjC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IAER,8FAA8F;IAC9F,wBAAwB;IACxB,gCAAgC;IACjC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,2BAA2B;IAC3B,gFAAgF;IAChF,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,gFAAgF;IAChF,wBAAwB;IACxB,kCAAkC;IACnC,+CAA+C;IAC9C,cAAc;IACd,SAAS;IACT,2BAA2B;IAC3B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,iDAAiD;IACjD,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,MAAM;AACR,CAAC,CAAC,CAAC","sourcesContent":["process.env.NODE_ENV = 'test';\n\nimport * as mocha from 'mocha';\nimport * as chai from 'chai';\nimport app from '../../src/App';\n\nconst should = chai.should();\nconst environment = \"test\";\nconst config = require('../../knexfile.js')[environment];\nexport var knex = require('knex')(config);\n\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\n\ndescribe('********* routes : auth *********', function(){\n\n  // this.timeout(30000);\n  // before(() => {\n\n  //   return knex.migrate.rollback()\n  //   .then(() => { return knex.migrate.latest(); })\n  //   .then(() => { return knex.seed.run(); })\n  // });\n\n  // after(() => {\n  //   return knex.migrate.rollback();\n  // }); \n  // describe('GET /api/v1/actions/{action_id}', () => {\n  //   let token = \"\";\n  //   it('should login with jasonh@actodo.co', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'jasonh@actodo.co',\n  //       password: 'letmein',\n  //     })  \n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token');\n  //       token = res.body.token;\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n  //   it('should get action_id 1', (done) => {\n  //     chai.request(app)\n  //     .get('/api/v1/actions/1')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n\n  // });\n  \n  // describe('POST /api/v1/actions/{action_id}/skip', () => {\n  //   let token = \"\";\n  //   it('should login with jasonh@actodo.co', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'jasonh@actodo.co',\n  //       password: 'letmein',\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token');\n  //       token = res.body.token;\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n  //   it('should skip action_id 1', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/1/skip')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n\n  //   it('should return error with skipping action_id 1 again', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/1/skip')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       console.log(res.body);\n  //       should.exist(err);\n  //       res.status.should.eql(405);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n\n\n  //   it('should return error with skipping action_id 8:out of user\\'s permission', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/8/skip')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       console.log(res.body);\n  //       should.exist(err);\n  //       res.status.should.eql(403);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  //   it('should return error with skipping action_id 100 not found', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/100/skip')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(404);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  // });\n  \n  // describe('POST /api/v1/actions/{action_id}/complete', () => {\n  //   let token = \"\";\n  //   it('should login with jasonh@actodo.co', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'jasonh@actodo.co',\n  //       password: 'letmein',\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token');\n  //       token = res.body.token;\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n  //   it('should complete action_id 1', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/1/complete')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n\n  //   it('should return error with completing action_id 1 again', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/1/complete')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       console.log(res.body);\n  //       should.exist(err);\n  //       res.status.should.eql(405);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  //   it('should return error with completing action_id 8:out of user\\'s permission', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/8/complete')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       console.log(res.body);\n  //       should.exist(err);\n  //       res.status.should.eql(403);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  //   it('should return error with completing action_id 100 not found', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/actions/100/complete')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(404);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('PUT /api/v1/actions/{action_id}', () => {\n  //   let token = \"\";\n  //   it('should login with jasonh@actodo.co', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'jasonh@actodo.co',\n  //       password: 'letmein',\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token');\n  //       token = res.body.token;\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n  //   it('should update action_id 1', (done) => {\n  //     chai.request(app)\n  //     .put('/api/v1/actions/1')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //       title: 'New title',\n  //       subtitle:'New subtitle',\n  //       points: 230\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success','action');\n  //       res.body.success.should.eql(1);\n  //       res.body.action.title.should.eql('New title');\n  //       done(); \n  //     });\n  //   });\n\n  //   it('should return error with updating action_id 8:out of user\\'s permission', (done) => {\n  //     chai.request(app)\n  //     .put('/api/v1/actions/8')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       console.log(res.body);\n  //       should.exist(err);\n  //       res.status.should.eql(403);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  //   it('should return error with updating action_id 100 not found', (done) => {\n  //     chai.request(app)\n  //     .put('/api/v1/actions/100')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(404);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('DELETE /api/v1/actions/{action_id}', () => {\n  //   let token = \"\";\n  //   it('should login with jasonh@actodo.co', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'jasonh@actodo.co',\n  //       password: 'letmein',\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token');\n  //       token = res.body.token;\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n  //   it('should delete action_id 1', (done) => {\n  //     chai.request(app)\n  //     .del('/api/v1/actions/1')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n\n  //   it('should return error with deleting action_id 1 again', (done) => {\n  //     chai.request(app)\n  //     .del('/api/v1/actions/1')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       console.log(res.body);\n  //       should.exist(err);\n  //       res.status.should.eql(404);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n\n  //   it('should return error with deleting action_id 8:out of user\\'s permission', (done) => {\n  //     chai.request(app)\n  //     .del('/api/v1/actions/8')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       console.log(res.body);\n  //       should.exist(err);\n  //       //The action was deleted is fetched first than the permissio middleware\n  //       res.status.should.eql(403);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  //   it('should return error with deleting action_id 100 not found', (done) => {\n  //     chai.request(app)\n  //     .del('/api/v1/actions/100')\n\t//     .set('authorization', 'Bearer ' + token)\n  //     .send({\n  //     })\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(404);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success');\n  //       res.body.success.should.eql(0);\n  //       done();\n  //     });\n  //   });\n  // });\n});\n"]}