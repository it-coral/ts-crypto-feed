{"version":3,"file":"/home/pioneer/work/jason/actodo_api/test/integration/routes.group.action.test.ts","sources":["/home/pioneer/work/jason/actodo_api/test/integration/routes.group.action.test.ts"],"names":[],"mappings":"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","sourcesContent":["// process.env.NODE_ENV = 'test';\n\n// import * as mocha from 'mocha';\n// import * as chai from 'chai';\n// import app from '../../src/App';\n\n// const should = chai.should();\n// // const knex = require('../../src/db/connection');\n// var util = require('util');\n\n// const chaiHttp = require('chai-http');\n// chai.use(chaiHttp);\n\n// describe('********* routes : group actions *********', () => {\n//   beforeEach(() => {\n//     return knex.migrate.rollback()\n//     .then(() => { return knex.migrate.latest(); })\n//     .then(() => { return knex.seed.run(); });\n//   });\n\n//   afterEach(() => {\n//     return knex.migrate.rollback();\n//   });\n\n//   describe('GET /api/v1/groups/1/actions', () => {\n//     it('should return all actions for a group', (done) => {\n//       chai.request(app)\n//       .post('/api/v1/auth/login')\n//       .send({\n//         email: 'seed1@test.net',\n//         password: 'password'\n//       })\n//       .end((error, response) => {\n//         should.not.exist(error);\n//         chai.request(app)\n//         .get('/api/v1/groups/1/actions')\n//         .set('authorization', 'Bearer ' + response.body.token)\n//         .end((err, res) => {\n//           should.not.exist(err);\n//           res.status.should.eql(200);\n//           res.type.should.eql('application/json');\n//           res.body.status.should.eql('success');\n//           res.body.should.have.property('actions');\n//           res.body.actions.length.should.eql(2);\n//           res.body.actions[0].should.have.property('group_id');\n//           res.body.actions[0].group_id.should.eql(1);\n//           done();\n//         });\n//       });\n//     });\n//   });\n\n  // describe('POST /api/v1/groups/1/actions', () => {\n  //   it('should create a new group action', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups/1/actions')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({\n  //           action_type_id: 1,\n  //           title: 'TEST CREATE GROUP 1 ACTION EMAIL',\n  //           subtitle: 'This is the subtitle G1',\n  //           description: 'TEST CREATE GROUP 1 DESCRIPTION',\n  //           thanks_msg: 'TEST CREATE GROUP 1 THANKS MESSAGE',\n  //           points: 100,\n  //           start_at: '2017-03-01 10:00:00',\n  //           end_at: '2017-03-01 18:00:00',\n  //           param1: 'test@test.net',\n  //           param2: 'Test Subject',\n  //           param3: 'Test Body'\n  //       })\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('action');\n  //         res.body.action.should.have.property('group_id');\n  //         res.body.action.group_id.should.eql(1);\n  //         res.body.action.title.should.eql('TEST CREATE GROUP 1 ACTION EMAIL');\n  //         res.body.action.points.should.eql(100);\n  //         res.body.action.action_type_id.should.eql(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('GET /api/v1/groups/1/actions/1', () => {\n  //   it('should get the action for id 1', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/groups/1/actions/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('action');\n  //         res.body.action.should.have.property('group_id');\n  //         res.body.action.group_id.should.eql(1);\n  //         res.body.action.should.have.property('action_id');\n  //         res.body.action.action_id.should.eql(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/groups/1/actions/1/complete', () => {\n  //   it('marks an action complete for a user', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups/1/actions/1/complete')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         done();\n  //       });\n  //     });\n  //   });\n\n  //   it('should throw an error if user already marked complete', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups/1/actions/1/complete')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         // TODO: Make sure function returns error if user has already completed action\n  //         // should.exist(err);\n  //         // res.status.should.eql(401);\n  //         // res.body.status.should.eql('error');\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('GET /api/v1/groups/1/actions/types', () => {\n  //   it('returns array of supported action types', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/groups/1/actions/types')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('action_types');\n  //         res.body.action_types[0].should.have.property('action_type_id');\n  //         res.body.action_types[0].action_type_id.should.eql(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('DELETE /api/v1/groups/1/actions/1', () => {\n  //   it('deletes an action', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .del('/api/v1/groups/1/actions/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.should.be.a('object');\n  //         res.body.should.have.property('REMOVED');\n  //         res.body.REMOVED.should.be.a('object');\n  //         res.body.REMOVED.should.have.property('action_id');\n  //         res.body.REMOVED.action_id.should.equal(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('PUT /api/v1/groups/1/actions/1', () => {\n  //   it('updates an action', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .put('/api/v1/groups/1/actions/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({'title':'NEW TITLE','description':'NEW DESCRIPTION'})\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.should.be.a('object');\n  //         res.body.should.have.property('action');\n  //         res.body.action.should.have.property('title');\n  //         res.body.action.title.should.eql('NEW TITLE');\n  //         res.body.action.should.have.property('description');\n  //         res.body.action.description.should.eql('NEW DESCRIPTION');\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n// });\n"]}