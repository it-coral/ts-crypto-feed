{"version":3,"file":"/home/pioneer/work/jason/actodo_api/src/db/models/user.ts","sources":["/home/pioneer/work/jason/actodo_api/src/db/models/user.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport bookshelf from '../bookshelf';\nvar _ = require('lodash');\nconst bcrypt = require('bcryptjs');\n\nconst ValidationError = require('bookshelf-validate/lib/errors').ValidationError;\nimport bluebird from 'bluebird';\nimport Group from './group';\nimport GroupUser from './group_user';\nimport User from './user';\nimport Action from './action';\nimport ActionUser from './action_user';\n\nexport default bookshelf.Model.extend({\n  tableName: 'user',\n  hasTimestamps: true,\n  idAttribute: 'user_id',\n\n  initialize: function() {\n    this.on(\"saving\", this._assertEmailUnique);\n    this.on(\"saving\", this._assertUsernameUnique);\n    // if(this.isNew())\n    //   this.validations =  {\n    //     email: [\n    //       { method: 'isRequired', error:'Email Required'},\n    //       { isEmail: {allow_display_name: true} }, // Options object passed to node-validator\n    //       // { method: 'isLength', error: 'Username 4-32 characters long.', args: [4, 32] } // Custom error message\n    //     ],\n    //     password: [\n    //       { method: 'isRequired', error:'Password Required'},\n    //       { method: 'isLength', error: 'Password shoud be longer than 6.', args: [6] }, // Custom error message\n    //     ]\n    //   };\n    // else\n    //   this.validations =  {\n    //     email: [\n    //       { isEmail: {allow_display_name: true} }, // Options object passed to node-validator\n    //       // { method: 'isLength', error: 'Username 4-32 characters long.', args: [4, 32] } // Custom error message\n    //     ],\n    //     password: { method: 'isLength', error: 'Password shoud be longer than 6.', args: [6] }, // Custom error message\n        \n    //   };\n    // this.on('saving', this.validateOnSave);\n    this.on('saving', this.cryptPassword);\n  },\n\n \n\n  cryptPassword: function(model, attributes, options) {\n    if (this.hasChanged('password')) {\n      const salt = bcrypt.genSaltSync();\n      const hash = bcrypt.hashSync(this.get('password'), salt);\n\n      this.set({password:hash});\n      return this;\n    }\n  },\n\n  _assertEmailUnique: function(model, attributes, options) {\n    if (this.hasChanged('email')) {\n      return User\n        .query('where', 'email', this.get('email'))\n        .fetch({})\n        .then(function (existing) {\n          if (existing) throw new ValidationError('Choose Another Email');\n        });\n    }\n  },\n  _assertUsernameUnique: function(model, attributes, options) {\n    if (this.hasChanged('username')) {\n      return User\n        .query('where', 'username', this.get('username'))\n        .fetch({})\n        .then(function (existing) {\n          if (existing) throw new ValidationError('Choose Another Username');\n        });\n    }\n  },\n  groups: function() {\n    return this.belongsToMany(Group, 'group_user', 'user_id', 'group_id', 'user_id', 'group_id');\n  },\n  actions: function() {\n    return this.belongsToMany(Action, 'action_user', 'user_id', 'action_id', 'user_id', 'action_id');\n  },\n  \n  authenticate: function(password){\n    const bool = bcrypt.compareSync(password, this.get('password'));\n    if (!bool) throw new Error('Invalid password');\n    else return true;\n  },\n  // initialize: function() {\n    // this.on('saving', this.validateSave);\n  // },\n  // validateSave: function() {\n    // return checkit(rules).run(this.attributes);\n  // },\n\n  /* returns ID array of groups this user belongs to */\n  getGroupIDs: function(){\n\n     return this.load('groups')\n      .then(user=>{\n        return user.related('groups').toJSON().map((group)=>{return group.group_id});\n      })\n  },\n  getTotalPointsOn: function(group){  \n    let actionIDs = [];\n    return group.load('actions').then(gro=>{\n      return actionIDs = gro.related('actions').toJSON().map((action)=>{return action.action_id});\n    }).then(actionIDs=>{\n      let _this = this;\n      return ActionUser.collection().query(function(qb) {\n        qb.where('user_id', '=', _this.get('user_id')).whereIn('action_id', actionIDs);\n      }).fetch();\n    }).then(actionusers=>{\n      let points = 0;\n      actionusers.forEach(actionuser=>{\n        points += actionuser.get('points');\n      });\n      return points;      \n    });\n  },\n  getGroupUser: function(group_id){\n    return GroupUser.where({user_id: this.get('user_id'), group_id: group_id}).fetch();\n  },\n}, {\n  // saveUser: function(attrs){\n  //   if(attrs.password){\n\n  //   }\n\n  // },\n\n  // byIdWithUserGroup: function (userId) {\n  //     return this.forge()\n  //         .query({ where: { id: userId } })\n  //         .fetch({ withRelated: ['userGroup'] })\n  //     ;\n  // }\n  login: function(email, password) {\n    if (!email || !password) throw new Error('Email and password are both required');\n    return new this({email: email.toLowerCase().trim()}).fetch({require: true})\n    .tap(function(customer) {\n      return bcrypt.compareAsync(password, customer.get('password'))\n        .then(function(res) {\n          if (!res) throw new Error('Invalid password');\n        });\n    });\n  }\n});"]}