{"version":3,"file":"/home/pioneer/work/jason/actodo_api/src/routes/ActionRouter.ts","sources":["/home/pioneer/work/jason/actodo_api/src/routes/ActionRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Router, Request, Response, NextFunction} from 'express';\nimport {IRequest} from '../classes/IRequest';\nconst tokenHelper = require('../tools/tokens');\nconst actionHelper = require('../tools/action_helpers');\nconst toolHelpers = require('../tools/_helpers');\nconst validate = require('../classes/ParamValidator');\nimport ActionValidation from '../validations/ActionValidation';\n\nimport bluebird from 'bluebird';\nvar util = require('util');\nimport User from '../db/models/user';\nimport Group from '../db/models/group';\nimport ActionUser from '../db/models/action_user';\nimport GroupUser from '../db/models/group_user';\nimport Action from '../db/models/action';\n\nvar path = require('path'),\n    fs = require('fs');\n\nexport class ActionRouter {\n  router: Router\n\n\n  /**\n   * Initialize the ActionRouter\n   */\n  constructor() {\n    this.router = Router();\n    this.init();\n  }\n\n  \n  /**\n  * @description Gets list of actions user can perform\n  *              skip = 0 and deleted_at=null\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  */\n  \n  public getAction(req: IRequest, res: Response, next: NextFunction) {\n    res.status(200).json({\n      success: 1,\n      action: req.current_action\n    })\n  }\n\n\n  /**\n  * @description Create POST /actions/:action_id/skip API Call\n                Creates new action_user record and sets action_user.points= 0, and action_user.skip = true\n                If user has an existing completed or skipped action_user record for the specified action, return an error.\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  */\n  \n  public skipAction(req: IRequest, res: Response, next: NextFunction) {\n     return ActionUser.where({action_id:req.params.action_id, \n                              user_id:req.user.get('user_id')}).fetch()\n     .then(action_user=>{\n       if(action_user != null){\n        return res.status(405).json({\n          success: 0,\n          message: \"User already completed/skipped action and is not allowed to do it again\"\n        });\n       }\n       else{\n         new ActionUser({user_id: req.user.get('user_id'),\n                         action_id: req.current_action.get('action_id'),\n                         skip:true,\n                         points:0}).save()\n        .then(function(actionuser) {\n          res.status(200).json({\n            success: 1,\n            message: \"The action was successfully skipped\"\n          })\n        })\n       }\n     }).catch(err=>{\n       res.status(500).json({\n          success: 1,\n          message: \"Unknown error\"\n        });\n     })\n  }\n\n\n  /**\n  * @description Create POST /actions/:action_id/complete API Call\n                  Creates new action_user record and sets action_user.points equal to action.points, based on the action being marked complete.\n                  If user has an existing completed action_user record for the specified action, return an error.\n                  If user has an existing \"skipped\" action_user record for the specified action, set action_user.skipped to false, and update action_user.points accordingly\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  */\n  \n  public completeAction(req: IRequest, res: Response, next: NextFunction) {\n     return ActionUser.where({action_id:req.params.action_id, \n                              user_id:req.user.get('user_id')}).fetch()\n     .then(action_user=>{\n       if(action_user != null){\n         if((action_user.get('skip') == false)){\n          res.status(405).json({\n            success: 0,\n            message: \"The action was already completed\"\n          })\n         }\n         else{\n           action_user.save({skip:false, \n                             points: req.current_action.get('points')})\n           .then(action_user=>{\n             res.status(200).json({\n               success: 1,\n               message: \"The action is completed\"\n             });\n           })\n         }\n       }\n       else{\n         new ActionUser({user_id: req.user.get('user_id'),\n                    action_id: req.current_action.get('action_id'),\n                    skip:false,\n                    points:req.current_action.get('points')}).save()\n        .then(function(actionuser) {\n          res.status(200).json({\n            success: 1,\n            message: \"The action was successfully completed\"\n          })\n        })\n       }\n     }).catch(err=>{\n       res.status(500).json({\n          success: 1,\n          message: err.message\n        });\n     })\n  }\n\n  /**\n  * @description \n            - Create DELETE `/actions/:action_id` API Call\n            - Ensure caller is member of the group and either:\n              - has `group_user.mod_actions` = true, OR\n              - is the `action.created_by_user_id` creator of the action\n            - Delete action should *not* delete the action, but should set the `deleted_at` datetime, and set `deleted_by_user_id` to the user_id of the calling user\n\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  */\n  \n  public deleteAction(req: IRequest, res: Response, next: NextFunction) {\n     return req.current_action.save({deleted_at: new Date(),\n                                     deleted_by_user_id: req.user.get('user_id')})\n     .then(action=>{\n        res.status(200).json({\n          success: 1,\n          message: \"The action is successfully deleted\"\n        })\n     }).catch(err=>{\n       res.status(500).json({\n          success: 0,\n          message: err.message\n        });\n     })\n  }\n\n  /**\n  * @description \n            Create PUT /actions/:action_id API Call\n            Updates the specified action based on the submitted payload\n            Ensure caller is member of the group and either:\n              has group_user.mod_actions = true, OR\n              is the action.created_by_user_id creator of the action\n\n  * @param Request\n  * @param Response\n  * @param Callback function (NextFunction)\n  */\n  \n  public putAction(req: IRequest, res: Response, next: NextFunction) {\n     return req.current_action.save(req.body)\n     .then(action=>{\n        res.status(200).json({\n          success: 1,\n          message: \"The action is successfully updated\",\n          action: action\n        })\n     }).catch(err=>{\n       res.status(500).json({\n          success: 1,\n          message: err.message\n        });\n     })\n  }\n  /**\n   * Take each handler, and attach to one of the Express.Router's\n   * endpoints.\n   */\n  init() {  \n    // Routes for /api/v1/action\n    // this.router.get('/', this.getUser);\n    this.router.get('/:action_id', \n                validate(ActionValidation.needActionId),\n                actionHelper.checkAction,\n                actionHelper.checkUserBelongtoAction, \n                this.getAction);\n\n    this.router.delete('/:action_id', \n                validate(ActionValidation.needActionId), \n                actionHelper.checkAction,\n                actionHelper.checkUserBelongtoAction,\n                actionHelper.checkUserPermissionModAction,\n                this.deleteAction);\n    this.router.put('/:action_id', \n                validate(ActionValidation.putAction),\n                actionHelper.checkAction,\n                actionHelper.checkUserBelongtoAction,\n                actionHelper.checkUserPermissionModAction,\n                this.putAction);\n\n    this.router.post('/:action_id/skip', \n                validate(ActionValidation.needActionId), \n                actionHelper.checkAction,\n                actionHelper.checkUserBelongtoAction,\n                this.skipAction);\n    this.router.post('/:action_id/complete', \n                validate(ActionValidation.needActionId), \n                actionHelper.checkAction,\n                actionHelper.checkUserBelongtoAction,\n                this.completeAction);\n  }\n\n}\n\n// Create the ActionRouter, and export its configured Express.Router\nconst actionRoutes = new ActionRouter();\nactionRoutes.init();\n\nexport default actionRoutes.router;\n"]}