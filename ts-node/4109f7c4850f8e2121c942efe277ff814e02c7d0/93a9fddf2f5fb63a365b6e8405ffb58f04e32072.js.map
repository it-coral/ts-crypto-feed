{"version":3,"file":"/var/www/actodo_api/src/routes/UserRouter.ts","sources":["/var/www/actodo_api/src/routes/UserRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Router, Request, Response, NextFunction} from 'express';\nimport {IRequest} from '../classes/IRequest';\nconst tokenHelper = require('../tools/tokens');\nconst toolHelpers = require('../tools/_helpers');\nimport bluebird from 'bluebird';\nvar util = require('util');\nimport User from '../db/models/user';\nimport Group from '../db/models/group';\nvar path = require('path'),\n    fs = require('fs');\n\nexport class UserRouter {\n  router: Router\n\n\n  /**\n   * Initialize the AuthRouter\n   */\n  constructor() {\n    this.router = Router();\n    this.init();\n  }\n\n  /**\n   * @description Gets a user object for logged in user\n   * @param  req Request object\n   * @param  res Response object\n   * @param  next NextFunction that is called\n   * @return 200 JSON of user object\n   */\n    public getUser(req: IRequest, res: Response, next: NextFunction) {\n      if(req.params.id) {\n        return User.where({user_id:parseInt(req.params.id)}).fetch()\n        .asCallback((err, user) => {\n          if(err)\n            throw err;\n          else if(user == null)\n            res.status(400).json({\n              success: 1,\n              message: \"No user id\"\n            })\n          else \n            res.status(200).json({\n              success: 1,\n              user: user\n            });\n        })\n        .catch(function(err){\n          res.status(400).json({\n            success: 0,\n            message: err.message\n          })\n        });\n      } else {\n        res.status(200).json({\n          success: 1,\n          token: tokenHelper.encodeToken(req.user.id),\n          user: req.user\n        });\n      }\n    }\n\n    /**\n    * @description Updates/Saves the current user's information\n    * @param Request\n    * @param Response\n    * @param Callback function (NextFunction)\n    */  \n    public putUser(req: IRequest, res: Response, next: NextFunction) {\n      return req.user.save(req.body)\n      .then((user) => {\n        req.user = user;\n        if(req.files){\n          try{\n            let file = req.files.avatar_file;\n            var targetPath = path.resolve('./public/uploads/users/avatars/'+req.user.get('user_id')+path.extname(file.name).toLowerCase());\n            if ((path.extname(file.name).toLowerCase() === '.jpg')||\n                (path.extname(file.name).toLowerCase() === '.png')) { \n\n              file.mv(targetPath, function(err) {\n                if (err) {\n                  err.message = \"Upload failed\";\n                  throw err;\n                }\n                else {\n                  return true;\n                }\n              });   \n              return true;  \n            } else {\n              let err = new Error();\n              err.message = \"Only jpg/png are acceptable\";\n              throw err;\n            }\n          }catch(err){\n            throw err;\n          }\n        }\n        else{\n          return false;\n        }\n      })\n      .then((isUploadSuccess)=>{\n        if(isUploadSuccess){\n          let image_url = toolHelpers.getBaseUrl(req) + '/uploads/users/avatars/'+req.user.get('user_id')+path.extname(req.files.avatar_file.name).toLowerCase();\n             \n          return req.user.save({avatar_file:image_url});\n        }\n        else\n          return req.user;\n      })\n      .then((user) => {\n        req.user = user;\n        return tokenHelper.encodeToken(user.get('user_id')); \n      })\n      .then((token) => {\n        res.status(200).json({\n          success: 1,\n          token: token,\n          user: req.user,\n          message:\"Success\"\n        });\n      })\n      .catch((err) => {\n        res.status(500).json({\n          success: 0,\n          message:err.message,\n          data:err.data,  \n          user:{},\n          token:\"\"\n        });\n      });\n    }\n\n    /**\n    * @description Gets list of groups user belongs to\n    * @param Request\n    * @param Response\n    * @param Callback function (NextFunction)\n    */\n    public getGroups(req: IRequest, res: Response, next: NextFunction) {\n      let uid;\n\n      if(!req.params.id) {\n        uid = req.user.id;\n      }\n      else\n        uid = parseInt(req.params.id);\n      User.where({user_id: uid}).fetch({\n        withRelated: [ 'groups', 'groups.settings', 'groups.tags', 'groups.creator']\n      })\n      .asCallback((err, user) => {\n        if(err) return res.status(500).json({success: 0, message:err.message, token:\"\", groups:[]});\n        if(user == null) return res.status(500).json({success:0, message:\"Invalid userid\"});\n          return res.status(200).json({\n            success: 1,\n            groups: user.related('groups')\n          });\n      });\n    }\n    public putUserpassword(req: IRequest, res: Response, next: NextFunction) {\n      try{\n        req.user.authenticate(req.body.original_password);\n        \n        req.user.save({ \n          password:req.body.new_password })\n        .then((user) => {\n          req.user = user;\n          return tokenHelper.encodeToken(user.get('user_id')); \n        })\n        .then((token) => {\n          res.status(200).json({\n            success: 1,\n            token: token,\n            user: req.user,\n            message:\"Success\"\n          });\n        })\n        .catch((err) => {\n          res.status(500).json({\n            success: 0,\n            message:err.message,\n            data:err.data,\n          });\n        });\n      }catch(err){\n        res.status(400).json({\n          success: 0,\n          message: err.message,\n          data: []\n        })\n      }\n    }\n\n  /**\n   * Take each handler, and attach to one of the Express.Router's\n   * endpoints.\n   */\n  init() {\n    // Routes for /api/v1/user\n    this.router.get('/', this.getUser);\n    this.router.put('/', this.putUser);\n    this.router.put('/password', this.putUserpassword);\n    this.router.get('/groups', this.getGroups);\n    this.router.get('/:id', this.getUser);\n    this.router.get('/:id/groups', this.getGroups);\n  }\n\n}\n\n// Create the AuthRouter, and export its configured Express.Router\nconst authRoutes = new UserRouter();\nauthRoutes.init();\n\nexport default authRoutes.router;\n"]}