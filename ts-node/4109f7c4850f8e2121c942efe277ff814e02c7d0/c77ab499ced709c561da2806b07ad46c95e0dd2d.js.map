{"version":3,"file":"/var/www/actodo_api/src/db/models/user.ts","sources":["/var/www/actodo_api/src/db/models/user.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport bookshelf from '../bookshelf';\nvar _ = require('lodash');\nconst bcrypt = require('bcryptjs');\n\nconst ValidationError = require('bookshelf-validate/lib/errors').ValidationError;\nimport bluebird from 'bluebird';\nimport Group from './group';\nimport GroupUser from './group_user';\nimport User from './user';\n\nexport default bookshelf.Model.extend({\n  tableName: 'user',\n  hasTimestamps: true,\n  idAttribute: 'user_id',\n\n  initialize: function() {\n    this.on(\"saving\", this._assertEmailUnique);\n    this.on(\"saving\", this._assertUsernameUnique);\n    if(this.isNew())\n      this.validations =  {\n        email: [\n          { method: 'isRequired', error:'Email Required'},\n          { isEmail: {allow_display_name: true} }, // Options object passed to node-validator\n          // { method: 'isLength', error: 'Username 4-32 characters long.', args: [4, 32] } // Custom error message\n        ],\n        password: [\n          { method: 'isRequired', error:'Password Required'},\n          { method: 'isLength', error: 'Password shoud be longer than 6.', args: [6] }, // Custom error message\n        ]\n      };\n    else\n      this.validations =  {\n        email: [\n          { isEmail: {allow_display_name: true} }, // Options object passed to node-validator\n          // { method: 'isLength', error: 'Username 4-32 characters long.', args: [4, 32] } // Custom error message\n        ],\n        password: { method: 'isLength', error: 'Password shoud be longer than 6.', args: [6] }, // Custom error message\n        \n      };\n    this.on('saving', this.validateOnSave);\n    this.on('saving', this.cryptPassword);\n  },\n\n \n\n  cryptPassword: function(model, attributes, options) {\n    if (this.hasChanged('password')) {\n      const salt = bcrypt.genSaltSync();\n      const hash = bcrypt.hashSync(this.get('password'), salt);\n\n      this.set({password:hash});\n      return this;\n    }\n  },\n\n  _assertEmailUnique: function(model, attributes, options) {\n    if (this.hasChanged('email')) {\n      return User\n        .query('where', 'email', this.get('email'))\n        .fetch({})\n        .then(function (existing) {\n          if (existing) throw new ValidationError('Choose Another Email');\n        });\n    }\n  },\n  _assertUsernameUnique: function(model, attributes, options) {\n    if (this.hasChanged('username')) {\n      return User\n        .query('where', 'username', this.get('username'))\n        .fetch({})\n        .then(function (existing) {\n          if (existing) throw new ValidationError('Choose Another Username');\n        });\n    }\n  },\n  groups: function() {\n    return this.belongsToMany(Group, 'group_user', 'user_id', 'group_id', 'user_id', 'group_id');\n  },\n  \n  authenticate: function(password){\n    const bool = bcrypt.compareSync(password, this.get('password'));\n    if (!bool) throw new Error('Invalid password');\n    else return true;\n  },\n  // initialize: function() {\n    // this.on('saving', this.validateSave);\n  // },\n  // validateSave: function() {\n    // return checkit(rules).run(this.attributes);\n  // },\n\n}, {\n  // saveUser: function(attrs){\n  //   if(attrs.password){\n\n  //   }\n\n  // },\n\n  // byIdWithUserGroup: function (userId) {\n  //     return this.forge()\n  //         .query({ where: { id: userId } })\n  //         .fetch({ withRelated: ['userGroup'] })\n  //     ;\n  // }\n  login: function(email, password) {\n    if (!email || !password) throw new Error('Email and password are both required');\n    return new this({email: email.toLowerCase().trim()}).fetch({require: true})\n    .tap(function(customer) {\n      return bcrypt.compareAsync(password, customer.get('password'))\n        .then(function(res) {\n          if (!res) throw new Error('Invalid password');\n        });\n    });\n  }\n});"]}