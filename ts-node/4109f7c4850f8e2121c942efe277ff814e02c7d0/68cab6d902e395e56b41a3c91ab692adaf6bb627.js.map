{"version":3,"file":"/var/www/actodo_api/src/routes/AuthRouter.ts","sources":["/var/www/actodo_api/src/routes/AuthRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Router, Request, Response, NextFunction} from 'express';\nimport {IRequest} from '../classes/IRequest'\nconst tokenHelpers = require('../tools/tokens');\nconst toolHelpers = require('../tools/_helpers');\nvar util = require('util');\nimport User from '../db/models/user';\n\nexport class AuthRouter {\n  router: Router\n\n  /**\n   * Initialize the AuthRouter\n   */\n  constructor() {\n    this.router = Router();\n    this.init();\n  }\n\n/**\n * Creates new user record in database\n * @param  req Request object\n * @param  res Response object\n * @param  next NextFunction that is called\n * @return 200 JSON of user object\n * TODO: throw error if email or username already exists : Done\n */\n  public register(req: IRequest, res: Response, next: NextFunction) {\n    return new User(req.body).save()\n    .then((user) => {\n      req.user = user;\n      return tokenHelpers.encodeToken(user.get('user_id')); \n    })\n    .then((token) => {\n      res.status(200).json({\n        success: 1,\n        user: req.user,\n        token: token\n      });\n    })\n    .catch((err) => {\n      res.status(400).json({\n        success: 0,\n        message: err.message,\n        data: err.data,\n        user: {},\n        token: \"\",\n      });\n    });\n  }\n\n /**\n  * Logs the user in. Expects email and password in request object.\n  * @param  req Request object\n  * @param  res Response object\n  * @param  next NextFunction that is called\n  * @return 200 JSON of user object and auth token\n  */\n  public login(req: IRequest, res: Response, next: NextFunction) {\n    const email = req.body.email;\n    const password = req.body.password;\n    return User.where({email : email}).fetch()\n    .then((user) => {\n      if(!user)\n        throw Error(\"Invalid email address\");\n      user.authenticate(password);\n      req.user = user;\n      return user;\n    })\n    .then((response) => {\n      return tokenHelpers.encodeToken(response.id);\n    })\n    .then((token) => {\n      res.status(200).json({\n        success: 1,\n        token: token,\n        user: req.user\n      });\n    })\n    .catch((err) => {\n      res.status(200).json({\n        success: 0,\n        user: {},\n        token: \"\",\n        message: err.message\n      });\n    });\n  }\n\n  /**\n   * Take each handler, and attach to one of the Express.Router's\n   * endpoints.\n   */\n  init() {\n    this.router.post('/register', this.register);\n    this.router.post('/login', this.login);\n  }\n\n}\n\n\n\n// Create the AuthRouter, and export its configured Express.Router\nconst authRoutes = new AuthRouter();\nauthRoutes.init();\n\nexport default authRoutes.router;\n"]}