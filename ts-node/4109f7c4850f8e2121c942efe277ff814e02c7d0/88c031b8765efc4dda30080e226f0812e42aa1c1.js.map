{"version":3,"file":"/var/www/actodo_api/test/integration/routes.group.test.ts","sources":["/var/www/actodo_api/test/integration/routes.group.test.ts"],"names":[],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\n\nimport * as mocha from 'mocha';\nimport * as chai from 'chai';\nimport app from '../../src/App';\n\nconst should = chai.should();\nconst environment = \"test\";\nconst config = require('../../knexfile.js')[environment];\nexport var knex = require('knex')(config);\n\nvar util = require('util');\n\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\n\ndescribe('********* routes : group *********', function(){\n  \n  this.timeout(30000);\n  before(() => {\n\n    return knex.migrate.rollback()\n    .then(() => { return knex.migrate.latest(); })\n    .then(() => { return knex.seed.run(); })\n  });\n\n  after(() => {\n    return knex.migrate.rollback();\n  });\n\n  describe('GET /api/v1/groups', () => {\n    it('should return a success', (done) => {\n      chai.request(app)\n      .get('/api/v1/groups')\n      .end((err, res) => {\n        should.not.exist(err);\n        res.status.should.eql(200);\n        res.type.should.eql('application/json');\n        res.body.success.should.eql(1);\n        done();\n      });\n    });\n\n    it('should return array of groups', (done) => {\n      chai.request(app)\n      .get('/api/v1/groups')\n      .end((err, res) => {\n        should.not.exist(err);\n        res.status.should.eql(200);\n        res.type.should.eql('application/json');\n        res.body.should.have.property('groups');\n        done();\n      });\n    });\n  });\n\n  // describe('GET /api/v1/groups/3', () => {\n  //   it('should return expected group', (done) => {\n  //     chai.request(app)\n  //     .get('/api/v1/groups/3')\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.have.property('group');\n  //       res.body.group.should.have.property('group_id');\n  //       res.body.group.group_id.should.equal(3);\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/groups', () => {\n  //   it('should create a new group', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({\n  //         created_by_user_id: 1,\n  //         name: 'TEST CREATE GROUP',\n  //         private: 0,\n  //         description: 'TEST CREATE GROUP DESCRIPTION',\n  //         welcome: 'WELCOME TO THE TEST CREATE GROUP',\n  //         banner_image_url: 'https://upload.wikimedia.org/wikipedia/en/8/86/Avatar_Aang.png',\n  //         latitude: '51.5032520',\n  //         longitude: '-0.1278990'\n  //       })\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('group');\n  //         res.body.group.should.have.property('name');\n  //         res.body.group.name.should.equal('TEST CREATE GROUP');\n  //         res.body.group.created_by_user_id.should.equal(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/groups', () => {\n  //   it('return 401 unauthorized', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/groups')\n  //     .send({\n  //       created_by_user_id: 1,\n  //       name: 'TEST CREATE GROUP',\n  //       private: 0,\n  //       description: 'TEST CREATE GROUP DESCRIPTION',\n  //       welcome: 'WELCOME TO THE TEST CREATE GROUP',\n  //       banner_image_url: 'https://upload.wikimedia.org/wikipedia/en/8/86/Avatar_Aang.png',\n  //       latitude: '51.5032520',\n  //       longitude: '-0.1278990'\n  //     })\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(401);\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('PUT /api/v1/groups/1', () => {\n  //   it('should update group info and return updated group', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .put('/api/v1/groups/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({'name':'NEWLY UPDATED NAME','private':1})\n  //       .end((err, resp) => {\n  //         should.not.exist(err);\n  //         resp.status.should.eql(200);\n  //         resp.should.be.json;\n  //         resp.body.should.be.a('object');\n  //         resp.body.should.have.property('group');\n  //         resp.body.group.should.have.property('group_id');\n  //         resp.body.group.group_id.should.equal(1);\n  //         resp.body.group.name.should.equal('NEWLY UPDATED NAME');\n  //         resp.body.group.name.should.not.equal('Test Group 1');\n  //         resp.body.group.private.should.equal(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  //   it('should return an error when not logged in', (done) => {\n  //     chai.request(app)\n  //     .put('/api/v1/groups/1')\n  //     .send({'name':'NEW','private':1})\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(401);\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/groups/4/members', () => {\n  //   it('should add user to the group', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups/4/members')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('GET /api/v1/groups/1/members', () => {\n  //   it('should return list of group members', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/groups/1/members')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.should.be.json;\n  //         res.body.should.be.a('object');\n  //         res.body.should.have.property('members');\n  //         res.body.members[0].username.should.equal('seeder1');\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('PUT /api/v1/groups/1/members/2', () => {\n  //   it('should update the specified member\\'s group permissions ', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .put('/api/v1/groups/1/members/2')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({'mod_actions':1,'submit_action':1})\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.should.be.json;\n  //         res.body.should.be.a('object');\n  //         res.body.should.have.property('members');\n  //         res.body.members[1].username.should.eql('seeder2');\n  //         res.body.members[1].mod_actions.should.eql(1);\n  //         res.body.members[1].submit_action.should.eql(1);\n  //         res.body.members[1].admin_settings.should.eql(0);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('PUT /api/v1/groups/1/members/2', () => {\n  //   it('should return 401 unauthorized', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed2@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .put('/api/v1/groups/1/members/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({'mod_actions':0,'submit_action':0})\n  //       .end((err, res) => {\n  //         should.exist(err);\n  //         res.status.should.eql(401);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n});\n"]}