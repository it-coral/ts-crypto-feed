{"version":3,"file":"/var/www/actodo_api/src/tools/tokens.ts","sources":["/var/www/actodo_api/src/tools/tokens.ts"],"names":[],"mappings":"AAAA,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAClC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC;AACtC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE3B;;;EAGE;AACF,qBAAqB,OAAe;IAClC,MAAM,QAAQ,GAAG;QACf,GAAG,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE;QACpC,GAAG,EAAE,MAAM,EAAE,CAAC,IAAI,EAAE;QACpB,GAAG,EAAE,OAAO;KACb,CAAC;IACF,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACxD,CAAC;AAED;;;EAGE;AACF,qBAAqB,KAAa,EAAE,QAAQ;IAC1C,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC5D,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;IAC5B,iCAAiC;IACjC,EAAE,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;IACtD,IAAI;QAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED;;;EAGE;AACF,8BAA8B,GAAG,EAAE,QAAQ;IACzC,EAAE,CAAA,CAAC,eAAe,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC,IAAG,CAAC;YACJ,IAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClD,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBAC9B,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;oBACP,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACzB,CAAC;YACH,CAAC,CAAC,CAAC;QACH,CAAC;QAAA,KAAK,CAAA,CAAC,GAAG,CAAC,CAAA,CAAC;YACV,QAAQ,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC;IACH,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,QAAQ,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;IACjD,CAAC;AACH,CAAC;AAED,MAAM,CAAC,OAAO,GAAG;IACf,WAAW;IACX,WAAW;IACX,oBAAoB;CACrB,CAAC","sourcesContent":["const moment = require('moment');\nconst jwt = require('jwt-simple');\nvar dotenv = require('dotenv').load();\nvar util = require('util');\n\n/**\n* @description encodes a token based on the user_id\n* @param Number ID of user\n*/\nfunction encodeToken(user_id: Number) {\n  const playload = {\n    exp: moment().add(14, 'days').unix(),\n    iat: moment().unix(),\n    sub: user_id\n  };\n  return jwt.encode(playload, process.env.TOKEN_SECRET);\n}\n\n/**\n* @description decodes the provided token\n* @param String of the token to decode\n*/\nfunction decodeToken(token: String, callback) {\n  const payload = jwt.decode(token, process.env.TOKEN_SECRET);\n  const now = moment().unix();\n  // check if the token has expired\n  if (now > payload.exp) callback('Token has expired.');\n  else callback(null, payload);\n}\n\n/**\n* @description returns the user_id based on the headers in the Request\n* @param Request object\n*/\nfunction getUserIdFromRequest(req, callback) {\n  if('authorization' in req.headers) {\n    try{\n    var header = req.headers.authorization.split(' ');\n    var token = header[1];\n    this.decodeToken(token, (err, cb) => {\n      if(err) {\n        callback(err);\n      } else {\n        callback(null, cb.sub);\n      }\n    });\n    }catch(err){\n      callback(err);\n    }\n  } else {\n    callback(new Error(\"Authentication required\"));\n  }\n}\n\nmodule.exports = {\n  encodeToken,\n  decodeToken,\n  getUserIdFromRequest\n};\n"]}