{"version":3,"file":"/var/www/actodo_api/test/integration/routes.auth.test.ts","sources":["/var/www/actodo_api/test/integration/routes.auth.test.ts"],"names":[],"mappings":";;AAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAG9B,6BAA6B;AAG7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC7B,MAAM,WAAW,GAAG,MAAM,CAAC;AAC3B,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,WAAW,CAAC,CAAC;AAC9C,QAAA,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;AAE1C,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACtC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAEnB,QAAQ,CAAC,mCAAmC,EAAE;IAE5C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACpB,MAAM,CAAC;QAEL,MAAM,CAAC,YAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;aAC7B,IAAI,CAAC,QAAQ,MAAM,CAAC,YAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;aAC7C,IAAI,CAAC,QAAQ,MAAM,CAAC,YAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1C,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC;QACJ,MAAM,CAAC,YAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,iDAAiD;IACjD,iDAAiD;IACjD,wBAAwB;IACxB,qCAAqC;IACrC,cAAc;IACd,mCAAmC;IACnC,8BAA8B;IAC9B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,0DAA0D;IAC1D,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,uEAAuE;IACvE,wBAAwB;IACxB,qCAAqC;IACrC,cAAc;IACd,mCAAmC;IACnC,8BAA8B;IAC9B,SAAS;IACT,2BAA2B;IAC3B,2BAA2B;IAC3B,oCAAoC;IACpC,iDAAiD;IACjD,yDAAyD;IACzD,wCAAwC;IACxC,0DAA0D;IAC1D,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,MAAM;IAEN,8CAA8C;IAC9C,mDAAmD;IACnD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,mCAAmC;IACnC,8BAA8B;IAC9B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,kEAAkE;IAClE,wCAAwC;IACxC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,MAAM;IAEN,8CAA8C;IAC9C,mDAAmD;IACnD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,oCAAoC;IACpC,8BAA8B;IAC9B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,oCAAoC;IACpC,iDAAiD;IACjD,4DAA4D;IAC5D,wCAAwC;IACxC,8DAA8D;IAC9D,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,MAAM;IAGN,8CAA8C;IAC9C,sDAAsD;IACtD,wBAAwB;IACxB,kCAAkC;IAClC,cAAc;IACd,iCAAiC;IACjC,6BAA6B;IAC7B,SAAS;IACT,2BAA2B;IAC3B,+BAA+B;IAC/B,8CAA8C;IAC9C,oCAAoC;IACpC,iDAAiD;IACjD,kEAAkE;IAClE,wCAAwC;IACxC,sCAAsC;IACtC,gBAAgB;IAChB,UAAU;IACV,QAAQ;IAER,4DAA4D;IAC5D,2BAA2B;IAC3B,qCAAqC;IACrC,iBAAiB;IACjB,uCAAuC;IACvC,qCAAqC;IACrC,YAAY;IACZ,8BAA8B;IAC9B,uCAAuC;IACvC,oDAAoD;IACpD,+DAA+D;IAC/D,2CAA2C;IAC3C,4DAA4D;IAC5D,mBAAmB;IACnB,aAAa;IACb,WAAW;IAEX,MAAM;AACR,CAAC,CAAC,CAAC","sourcesContent":["process.env.NODE_ENV = 'test';\n\nimport * as mocha from 'mocha';\nimport * as chai from 'chai';\nimport app from '../../src/App';\n\nconst should = chai.should();\nconst environment = \"test\";\nconst config = require('../../knexfile.js')[environment];\nexport var knex = require('knex')(config);\n\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\n\ndescribe('********* routes : auth *********', function(){\n\n  this.timeout(30000);\n  before(() => {\n\n    return knex.migrate.rollback()\n    .then(() => { return knex.migrate.latest(); })\n    .then(() => { return knex.seed.run(); })\n  });\n\n  after(() => {\n    return knex.migrate.rollback();\n  }); \n\n  // describe('POST /api/v1/auth/register', () => {\n  //   it('should register a new user', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/register')\n  //     .send({\n  //       email: 'newuser@test.net',\n  //       password: 'password',\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token');\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n  //   it('should return error with the same email register', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/register')\n  //     .send({\n  //       email: 'newuser@test.net',\n  //       password: 'password',\n  //     })\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(400);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'data');\n  //       res.body.success.should.eql(0);\n  //       res.body.data.should.eql(\"Choose Another Email\");\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/auth/login', () => {\n  //   it('should login with a new user', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'newuser@test.net',\n  //       password: 'password',\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token', 'user');\n  //       res.body.success.should.eql(1);\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/auth/login', () => {\n  //   it('should login with a new user', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'newuser@tsest.net',\n  //       password: 'password',\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'message');\n  //       res.body.success.should.eql(0);\n  //       res.body.message.should.eql(\"Invalid email address\");\n  //       done();\n  //     });\n  //   });\n  // });\n\n\n  // describe('POST /api/v1/auth/login', () => {\n  //   it('should log in a registered user', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       //res.redirects.length.should.eql(0);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.include.keys('success', 'token', 'user');\n  //       res.body.success.should.eql(1);\n  //       should.exist(res.body.token);\n  //       done();\n  //     });\n  //   });\n\n  //   // it('should not log in invalid password', (done) => {\n  //   //   chai.request(app)\n  //   //   .post('/api/v1/auth/login')\n  //   //   .send({\n  //   //     username: 'seed1@test.net',\n  //   //     password: 'wrongpassword'\n  //   //   })\n  //   //   .end((err, res) => {\n  //   //     res.status.should.eql(200);\n  //   //     res.type.should.eql('application/json');\n  //   //     res.body.should.include.keys('success', 'message');\n  //   //     res.body.success.should.eql(0);\n  //   //     res.body.message.should.eql(\"Invalid password\");\n  //   //     done();\n  //   //   });\n  //   // });\n  \n  // });\n});\n"]}