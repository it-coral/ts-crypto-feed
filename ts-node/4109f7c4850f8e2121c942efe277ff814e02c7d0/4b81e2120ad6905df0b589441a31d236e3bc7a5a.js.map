{"version":3,"file":"/var/www/actodo_api/src/tools/_helpers.ts","sources":["/var/www/actodo_api/src/tools/_helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import {Router, Request, Response, NextFunction} from 'express';\nimport {IRequest} from '../classes/IRequest';\nimport bookshelf from '../db/bookshelf';\nconst bcrypt = require('bcryptjs');\nconst tokenHelper = require('./tokens');\nvar util = require('util');\nimport User from '../db/models/user';\n\n\n/**\n* @description Get Base uri of current api call\n* @param req: Request request object containing uri information\n*/\nfunction getBaseUrl(req: Request) {\n  let base =  req.secure ? 'https' : 'http';\n  base += '://' + req.headers['host'].toString();\n  base += '/';\n  return base;\n}\n/***************************************************************/\n/**  User Functions **/\n/***************************************************************/\n\n// /**\n// * @description Inserts user data into database\n// * @param req: Request request object containing the user form data\n// */\n// // function createUser(req: Request) {\n// //   const salt = bcrypt.genSaltSync();\n// //   const hash = bcrypt.hashSync(req.body.password, salt);\n\n// //   //TODO: Validate the email & username don't exist in the system\n// //   const user = bookshelf.knex('user')\n// //   .insert({\n// //     email: req.body.email,\n// //     username: req.body.username,\n// //     password: hash,\n// //     first_name: req.body.first_name,\n// //     last_name: req.body.last_name,\n// //     avatar_file: req.body.avatar_file,\n// //     bio: req.body.bio,\n// //     latitude: req.body.latitude,\n// //     longitude: req.body.longitude\n// //   })\n// //   .returning('*');\n// //   return user;\n// // }\n\n// /**\n// * @description Validates the specified email is a valid format\n// * @param email: String the email address for the account\n// */\n// function validateEmail(email: string) {\n//     var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//     return re.test(email);\n// }\n\n// /**\n// * @description Returns user data for the specified username\n// * @param username: String the username for the account\n// */\n// function getUserByUsername(username: String) {\n//   return bookshelf.knex('user').where({username}).first();\n// }\n\n// /**\n// * @description Returns user data for the specified email\n// * @param email: String the email address for the account\n// */\n// function getUserByEmail(email: String) {\n//   return bookshelf.knex('user').where({email}).first();\n// }\n\n// /**\n// * @description Returns user data for the specified id\n// * @param user_id: Number id of the user\n// */\n// function getUserById(user_id: Number) {\n//   return bookshelf.knex('user').where({user_id}).first();\n// }\n\n// /**\n// * @description Returns user profile data for the specified id\n// * @param user_id: Number id of the user\n// */\n// function getUserProfileById(user_id: Number) {\n//   return bookshelf.knex('user').select('user_id', 'created_at', 'username', 'first_name', 'avatar_file', 'bio','latitude', 'longitude').where({user_id}).first();\n// }\n\n// /**\n// * @description Updates the user record based on JSON array userBody\n// * @param user_id: Number id of the user being updatedUser\n// * @param user_body: JSON array of user fields to update\n// */\n// function updateUser(user_id: Number, user_body: JSON, callback) {\n//   bookshelf.knex('user').where({user_id})\n//     .update(user_body)\n//     .then(function(count) {\n//       callback(null, count);\n//     });\n// }\n\n/**\n* @description Compares the given (plain text) password and encrypted password\n* @param userPassword: String plain text password being tested\n* @param databasePassword: String encrypted password to test against\n*/\n// function comparePass(userPassword: String, databasePassword: String) {\n//   const bool = bcrypt.compareSync(userPassword, databasePassword);\n//   if (!bool) throw new Error('invalid password');\n//   else return true;\n// }\n\n/**\n* @description Throws an error if the user is not authenticated\n* @param req: Request\n* @param res: Response\n* @param next: Callback function (NextFunction)\n*/\nfunction ensureAuthenticated(req: IRequest, res: Response, next: NextFunction) {\n  tokenHelper.getUserIdFromRequest(req, (err, user_id, token) => {\n    if(err) {\n        res.status(401).json({\n        success: 0,\n        message: err.message\n        // message: \"Expired or wrong token\"\n      });\n    } else {\n      // check if the user still exists in the db\n      return User.where({user_id: user_id}).fetch()\n      .then((user) => {\n        if(user == null)\n        {\n          res.status(400).json({\n            success: 0,\n            message: \"You are no longer a member here.\"\n          });\n        }\n        req.user = user;\n        next();\n      })\n      .catch((err) => {\n        res.status(401).json({\n          success: 0,\n          message: err.message\n        });\n      });\n    }\n  });\n}\n\n/***************************************************************/\n/**  Group Functions **/\n/***************************************************************/\n\n/**\n* @description Returns all the groups the user belongs to\n* @param user_id: Number id of the user\n*/\n// function getUsersGroups(user_id: Number) {\n//   //TODO: Need to return creator profile info with the group\n//   //TODO: Need to return group setting info with the group\n//   return bookshelf.knex('group')\n//     .innerJoin('group_user', 'group.group_id', 'group_user.group_id')\n//     .where('user_id', user_id);\n// }\n\n/**\n* @description Returns all the groups the user belongs to\n* @param user_id: Number id of the user\n*/\nfunction getUsersPublicGroups(user_id: Number) {\n  //TODO: Need to return creator profile info with the group\n  //TODO: Need to return group setting info with the group\n  return bookshelf.knex('group')\n    .innerJoin('group_user', 'group.group_id', 'group_user.group_id')\n    .where({'user_id':user_id, 'private':0});\n}\n\n/**\n* @description Returns all non-private and non-deleted groups (public call)\n*/\nfunction getAllGroups() {\n  return bookshelf.knex('group')\n    .where({'private':0, 'deleted_at':null});\n}\n\n/**\n* @description Returns a single group as specified by group_id\n* @param group_id: Number ID of the group to return\n*/\nfunction getGroupById(group_id: Number) {\n  return bookshelf.knex('group')\n    .select('*').where({group_id}).first();\n}\n\n/**\n* @description Creates a unique group code and returns it\n*/\nfunction createGroupCode() {\n  var text = \"\";\n  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for( var i=0; i < 9; i++ )\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n  //TODO: check that code doesn't already exist in database\n  return text;\n}\n\n/**\n* @description Creates a new group based on owner and request params\n* @param owner_id: Number user_id of person creating group\n* @param req: Request object\n*/\nfunction createGroup(owner_id: Number, req: Request) {\n  let groupCode = createGroupCode();\n  return bookshelf.knex('group')\n  .insert({\n    created_by_user_id: owner_id,\n    name: req.body.name,\n    description: req.body.description,\n    welcome: req.body.welcome,\n    latitude: req.body.latitude,\n    longitude: req.body.longitude,\n    private: req.body.private,\n    banner_image_url: req.body.banner_image_url,\n    group_code: groupCode\n  })\n  .returning('group_id');\n}\n\n/**\n* @description Updates group details\n* @param group_id: Number ID of the group\n* @param group_body: JSON array of group data being updated\n* @param callback function\n*/\nfunction updateGroup(group_id: Number, group_body: JSON, callback) {\n  bookshelf.knex('group').where({group_id})\n    .update(group_body) \n    .then(function(count) {\n      callback(null, count);\n    });\n}\n\n/**\n* @description Allows user to join group\n* @param Number ID of the group\n* @param Number ID of the user joining the group\n* @param callback function\n*/\nfunction joinGroup(group_id: Number, user_id: Number, callback) {\n  bookshelf.knex('group_user')\n  .insert({\n    group_id: group_id,\n    user_id: user_id,\n    admin_settings: 0,\n    admin_members: 0,\n    mod_actions: 0,\n    mod_comments: 0,\n    submit_action: 0,\n    banned: 0\n  })\n  .then(callback());\n}\n\n/**\n* @description Returns array of group members (excludes banned)\n* @param Number ID of the group\n* @param callback function\n*/\nfunction getGroupMembers(group_id: Number, callback) {\n  bookshelf.knex('user').select('user.user_id', 'user.username', 'user.avatar_file',\n                      'group_user.admin_settings', 'group_user.admin_members',\n                      'group_user.mod_actions', 'group_user.mod_comments',\n                      'group_user.submit_action')\n    .from('user')\n    .innerJoin('group_user', 'user.user_id', 'group_user.user_id')\n    .where({ group_id:group_id, banned:0 })\n    .asCallback(function(err, values) {\n      callback(err, values);\n    });\n}\n\n/**\n* @description Updates settings for a group user\n* @param group_id: Number ID of the group\n* @param user_id: Number ID of the user being edited\n* @param perm_body: JSON array of settings being updated\n*/\nfunction updateGroupUser(group_id: Number, user_id: Number, perm_body: JSON) {\n  return bookshelf.knex('group_user')\n    .update(perm_body)\n    .where({group_id, user_id})\n    .returning('*');\n}\n\n/**\n* @description gets specific group_user record for user\n* @param group_id: Number ID of the group\n* @param user_id: Number ID of the user\n*/\nfunction getGroupMemberById(group_id: Number, user_id: Number) {\n  return bookshelf.knex('group_user')\n    .where({group_id, user_id}).first();\n}\n\n/***************************************************************/\n/**  Group Action Functions **/\n/***************************************************************/\n\n/**\n* @description returns all non-deleted actions for specified group_id\n* @param group_id int id of group\n*/\nfunction getGroupActions(group_id, callback) {\n  bookshelf.knex('action')\n    .innerJoin('action_type', 'action.action_type_id', 'action_type.action_type_id')\n    .where({'action.group_id':group_id, 'action.deleted_at':null})\n    .asCallback(function(err, actions) {\n      callback(err, actions);\n    });\n}\n\n/**\n* @description creates a new group action\n* @param owner_id: Number user_id of the person creating the action\n* @param req: Request object containing action information\n*/\nfunction createGroupAction(owner_id: Number, req: Request) {\n  let group_id = parseInt(req.params.id);\n  return bookshelf.knex('action')\n  .insert({\n    group_id: group_id,\n    created_by_user_id: owner_id,\n    action_type_id: req.body.action_type_id,\n    title: req.body.title,\n    subtitle: req.body.subtitle,\n    description: req.body.description,\n    thanks_msg: req.body.thanks_msg,\n    points: req.body.points,\n    start_at: req.body.start_at,\n    end_at: req.body.end_at,\n    param1: req.body.param1,\n    param2: req.body.param2,\n    param3: req.body.param3,\n    param4: req.body.param4\n  })\n  .returning('action_id');\n}\n\n/**\n* @description Returns a single action by its action_id\n* @param action_id Number ID of the action to return\n* @param group_id: Number ID of group action belongs to\n*/\nfunction getActionById(action_id: Number, group_id: Number) {\n  return bookshelf.knex('action').where({action_id, group_id, deleted_at: null}).first();\n}\n\n/**\n* @description Creates an action_user record to record a user completed an action\n* @param action_id: Number ID of the action\n* @param user_id: Number ID of the user performing the action\n* TODO: Need to make sure user has not already completed action\n*/\nfunction createActionUser(action_id: Number, user_id: Number) {\n  return bookshelf.knex('action').where({action_id, deleted_at: null})\n    .then(function(action) {\n      return bookshelf.knex('action_user')\n      .insert({\n        action_id: action_id,\n        user_id: user_id,\n        points: action[0].points\n      })\n      .returning('*');\n    });\n}\n\n/**\n* @description Returns all supported action types\n*/\nfunction getActionTypes() {\n  return bookshelf.knex('action_type').select('*')\n    .returning('*');\n}\n\n/**\n* @description Marks the specified action deleted by setting the deleted_at flag\n* @param action_id: Number ID of action to be marked deleted\n* @param user_id: ID of the user marking the action as deleted\n*/\nfunction deleteAction(action_id: Number, user_id: Number) {\n  return bookshelf.knex('action').where({action_id})\n    .update({deleted_at: bookshelf.knex.fn.now(), deleted_by_user_id: user_id});\n}\n\nfunction updateAction(action_id: Number, action_body: JSON) {\n  return bookshelf.knex('action').where({action_id})\n    .update(action_body);\n}\n\nmodule.exports = {\n  // User Functions\n  // validateEmail,\n  // getUserByUsername,\n  // getUserByEmail,\n  // getUserById,\n  // getUserProfileById,\n  // getUsersGroups,\n  getBaseUrl,\n  getUsersPublicGroups,\n  // updateUser,\n  ensureAuthenticated,\n  \n  // Group Functions\n  getAllGroups,\n  getGroupById,\n  createGroup,\n  updateGroup,\n  joinGroup,\n  getGroupMembers,\n  updateGroupUser,\n  getGroupMemberById,\n  // Group Action Functions\n  getGroupActions,\n  createGroupAction,\n  getActionById,\n  createActionUser,\n  getActionTypes,\n  deleteAction,\n  updateAction,\n};\n"]}