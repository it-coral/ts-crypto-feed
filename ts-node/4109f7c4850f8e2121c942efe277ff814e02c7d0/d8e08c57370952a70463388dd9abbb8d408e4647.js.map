{"version":3,"file":"/var/www/actodo_api/test/integration/routes.group.action.test.ts","sources":["/var/www/actodo_api/test/integration/routes.group.action.test.ts"],"names":[],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\n\nimport * as mocha from 'mocha';\nimport * as chai from 'chai';\nimport app from '../../src/App';\n\nconst should = chai.should();\n// const knex = require('../../src/db/connection');\nvar util = require('util');\n\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\n\ndescribe('********* routes : group actions *********', () => {\n  // beforeEach(() => {\n  //   return knex.migrate.rollback()\n  //   .then(() => { return knex.migrate.latest(); })\n  //   .then(() => { return knex.seed.run(); });\n  // });\n\n  // afterEach(() => {\n  //   return knex.migrate.rollback();\n  // });\n\n  // describe('GET /api/v1/groups/1/actions', () => {\n  //   it('should return all actions for a group', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/groups/1/actions')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('actions');\n  //         res.body.actions.length.should.eql(2);\n  //         res.body.actions[0].should.have.property('group_id');\n  //         res.body.actions[0].group_id.should.eql(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/groups/1/actions', () => {\n  //   it('should create a new group action', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups/1/actions')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({\n  //           action_type_id: 1,\n  //           title: 'TEST CREATE GROUP 1 ACTION EMAIL',\n  //           subtitle: 'This is the subtitle G1',\n  //           description: 'TEST CREATE GROUP 1 DESCRIPTION',\n  //           thanks_msg: 'TEST CREATE GROUP 1 THANKS MESSAGE',\n  //           points: 100,\n  //           start_at: '2017-03-01 10:00:00',\n  //           end_at: '2017-03-01 18:00:00',\n  //           param1: 'test@test.net',\n  //           param2: 'Test Subject',\n  //           param3: 'Test Body'\n  //       })\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('action');\n  //         res.body.action.should.have.property('group_id');\n  //         res.body.action.group_id.should.eql(1);\n  //         res.body.action.title.should.eql('TEST CREATE GROUP 1 ACTION EMAIL');\n  //         res.body.action.points.should.eql(100);\n  //         res.body.action.action_type_id.should.eql(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('GET /api/v1/groups/1/actions/1', () => {\n  //   it('should get the action for id 1', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/groups/1/actions/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('action');\n  //         res.body.action.should.have.property('group_id');\n  //         res.body.action.group_id.should.eql(1);\n  //         res.body.action.should.have.property('action_id');\n  //         res.body.action.action_id.should.eql(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('POST /api/v1/groups/1/actions/1/complete', () => {\n  //   it('marks an action complete for a user', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups/1/actions/1/complete')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         done();\n  //       });\n  //     });\n  //   });\n\n  //   it('should throw an error if user already marked complete', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .post('/api/v1/groups/1/actions/1/complete')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         // TODO: Make sure function returns error if user has already completed action\n  //         // should.exist(err);\n  //         // res.status.should.eql(401);\n  //         // res.body.status.should.eql('error');\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('GET /api/v1/groups/1/actions/types', () => {\n  //   it('returns array of supported action types', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/groups/1/actions/types')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.status.should.eql('success');\n  //         res.body.should.have.property('action_types');\n  //         res.body.action_types[0].should.have.property('action_type_id');\n  //         res.body.action_types[0].action_type_id.should.eql(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('DELETE /api/v1/groups/1/actions/1', () => {\n  //   it('deletes an action', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .del('/api/v1/groups/1/actions/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.should.be.a('object');\n  //         res.body.should.have.property('REMOVED');\n  //         res.body.REMOVED.should.be.a('object');\n  //         res.body.REMOVED.should.have.property('action_id');\n  //         res.body.REMOVED.action_id.should.equal(1);\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n  // describe('PUT /api/v1/groups/1/actions/1', () => {\n  //   it('updates an action', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .put('/api/v1/groups/1/actions/1')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({'title':'NEW TITLE','description':'NEW DESCRIPTION'})\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.should.be.a('object');\n  //         res.body.should.have.property('action');\n  //         res.body.action.should.have.property('title');\n  //         res.body.action.title.should.eql('NEW TITLE');\n  //         res.body.action.should.have.property('description');\n  //         res.body.action.description.should.eql('NEW DESCRIPTION');\n  //         done();\n  //       });\n  //     });\n  //   });\n  // });\n\n});\n"]}