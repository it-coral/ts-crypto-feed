{"version":3,"file":"/var/www/actodo_api/test/integration/routes.user.test.ts","sources":["/var/www/actodo_api/test/integration/routes.user.test.ts"],"names":[],"mappings":"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","sourcesContent":["process.env.NODE_ENV = 'test';\n\nimport * as mocha from 'mocha';\nimport * as chai from 'chai';\nimport app from '../../src/App';\n\nconst should = chai.should();\nconst environment = \"test\";\nconst config = require('../../knexfile.js')[environment];\nexport var knex = require('knex')(config);\n\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\n\ndescribe('********* routes : user *********', function(){\n  \n  this.timeout(30000);\n  before(() => {\n\n    return knex.migrate.rollback()\n    .then(() => { return knex.migrate.latest(); })\n    .then(() => { return knex.seed.run(); })\n  });\n\n  after(() => {\n    return knex.migrate.rollback();\n  });\n\n  // describe('GET /api/v1/user', () => {\n  //   it('should return a success and correct user object', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/user')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.success.should.eql(1);\n  //         res.body.should.have.property('user');\n  //         res.body.user.should.have.property('username');\n  //         res.body.user.username.should.equal('seeder1');\n\n  //         done();\n  //       });\n  //     });\n  //   });\n\n  //   it('should return a success and correct user object on /user/1', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/user/2')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.success.should.eql(1);\n  //         res.body.should.have.property('user');\n  //         res.body.user.should.have.property('username');\n  //         res.body.user.username.should.equal('seeder2');\n\n  //         done();\n  //       });\n  //     });\n  //   });\n\n  //   it('should throw an error if a user is not logged in', (done) => {\n  //     chai.request(app)\n  //     .get('/api/v1/user')\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(401);\n  //       res.type.should.eql('application/json');\n  //       res.body.message.should.eql('Authentication required');\n  //       done();\n  //     });\n  //   });\n\n  // });\n\n  // describe('GET /api/v1/user/groups', () => {\n  //   it('should return a json array of groups', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/user/groups')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.success.should.eql(1);\n  //         res.body.groups.should.have.length(2);\n  //         done();\n  //       });\n  //     })\n  //   });\n  //   it('should return an error when not logged in', (done) => {\n  //     chai.request(app)\n  //     .get('/api/v1/user/groups')\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(401);\n  //       res.type.should.eql('application/json');\n  //       res.body.message.should.eql('Authentication required');\n  //       done();\n  //     });\n  //   });\n  // });\n\n  // describe('PUT /api/v1/user', () => {\n  //   var token = \"\";\n  //   it('should return a json array of updated user', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed1@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .put('/api/v1/user')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({'first_name':'NEW','last_name':'NAME', email:\"again@a.com\"})\n  //       .end((err, res) => {\n  //         res.status.should.eql(200);\n  //         res.should.be.json;\n  //         res.body.should.be.a('object');\n  //         res.body.should.have.property('user');\n  //         res.body.user.should.have.property('first_name');\n  //         res.body.user.should.have.property('last_name');\n  //         res.body.user.first_name.should.equal('NEW');\n  //         res.body.user.last_name.should.equal('NAME');\n  //         console.log(\"Changed firstname : \" + res.body.user.first_name);\n  //         token = response.body.token;\n  //         done();\n  //       });\n  //     });\n  //   });\n\n  //   it('should return an error when not logged in', (done) => {\n  //     chai.request(app)\n  //     .put('/api/v1/user')\n  //     .send({'first_name':'NEW','last_name':'NAME'})\n  //     .end((err, res) => {\n  //       should.exist(err);\n  //       res.status.should.eql(401);\n  //       res.type.should.eql('application/json');\n  //       res.body.message.should.eql('Authentication required');\n  //       done();\n  //     });\n  //   });\n  //   it('should save email to:erwin@g.com', (done) => {\n  //     chai.request(app)\n  //     .put('/api/v1/user')\n  //     .set('authorization', 'Bearer ' + token)\n  //     .send({'email':'erwin@g.com'})\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.have.property('user');\n  //       res.body.user.should.have.property('email');\n  //       res.body.user.email.should.equal('erwin@g.com'); \n  //       done();\n  //     });\n  //   });\n\n  //   it('should change password to:newpassword and success login', (done) => {\n  //     chai.request(app)\n  //     .put('/api/v1/user')\n  //     .set('authorization', 'Bearer ' + token)\n  //     .send({'password':'newpassword'})\n  //     .end((err, res) => {\n  //       should.not.exist(err);\n  //       res.status.should.eql(200);\n  //       res.type.should.eql('application/json');\n  //       res.body.should.have.property('user');\n  //       chai.request(app)\n  //       .post('/api/v1/auth/login')\n  //       .set('authorization', 'Bearer ' + token)\n  //       .send({'email':'erwin@g.com', 'password':'newpassword'})\n  //       .end((err, res) => {\n  //         should.not.exist(err);\n  //         res.status.should.eql(200);\n  //         res.type.should.eql('application/json');\n  //         res.body.should.include.keys('user', 'token');\n  //         done(); \n  //       })\n  //     });\n  //   });\n  // });\n\n\n  // describe('GET /api/v1/user/groups', () => {\n  //   var token = \"\";\n  //   it('should return a groups of seed1@test.net', (done) => {\n  //     chai.request(app)\n  //     .post('/api/v1/auth/login')\n  //     .send({\n  //       email: 'seed2@test.net',\n  //       password: 'password'\n  //     })\n  //     .end((error, response) => {\n  //       should.not.exist(error);\n  //       chai.request(app)\n  //       .get('/api/v1/user/groups')\n  //       .set('authorization', 'Bearer ' + response.body.token)\n  //       .send({})\n  //       .end((err, res) => {\n  //         res.status.should.eql(200);\n  //         res.should.be.json;\n  //         res.body.should.be.a('object');\n  //         res.body.should.include.keys('groups', 'success');\n  //         res.body.success.should.equal(1);\n  //         res.body.groups.should.be.a('array');\n  //         res.body.groups.should.have.length(2);\n  //         res.body.groups[0].should.include.keys('group_id', 'settings','tags');\n  //         res.body.groups[0].settings[0].allow_member_action.should.equal(0);\n  //         done();\n  //       });\n  //     });\n  //   });\n\n  // });\n\n  describe('PUT /api/v1/user/password', () => {\n    var token = \"\";\n    it('should change password', (done) => {\n      chai.request(app)\n      .post('/api/v1/auth/login')\n      .send({\n        email: 'seed2@test.net',\n        password: 'password'\n      })\n      .end((error, response) => {\n        should.not.exist(error);\n        chai.request(app)\n        .put('/api/v1/user/password')\n        .set('authorization', 'Bearer ' + response.body.token)\n        .send({original_password:\"password\", new_password:\"newpassword\"})\n        .end((err, res) => {\n          res.status.should.eql(200);\n          res.should.be.json;\n          res.body.should.be.a('object');\n          res.body.should.include.keys('user', 'success', 'token');\n          res.body.success.should.equal(1);\n          done();\n        });\n      });\n    });\n\n    it('should return invalid password on wrong original password', (done) => {\n      chai.request(app)\n      .post('/api/v1/auth/login')\n      .send({\n        email: 'seed1@test.net',\n        password: 'password'\n      })\n      .end((error, response) => {\n        should.not.exist(error);\n        chai.request(app)\n        .put('/api/v1/user/password')\n        .set('authorization', 'Bearer ' + response.body.token)\n        .send({original_password:\"wrongoriginal\", new_password:\"newpassword\"})\n        .end((err, res) => {\n          res.status.should.eql(400);\n          res.should.be.json;\n          res.body.should.be.a('object');\n          res.body.should.include.keys('message', 'success');\n          res.body.success.should.equal(0);\n          res.body.message.should.equal(\"Invalid password\");\n          done();\n        });\n      });\n    });\n  });\n});\n"]}